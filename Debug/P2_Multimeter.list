
P2_Multimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08003264  08003264  00004264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033e8  080033e8  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  080033e8  080033e8  000043e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033f0  080033f0  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033f0  080033f0  000043f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033f4  080033f4  000043f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080033f8  00005000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001128  20000070  08003468  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001198  08003468  00005198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004bcf  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010c8  00000000  00000000  00009c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  0000ad38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000444  00000000  00000000  0000b310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024edc  00000000  00000000  0000b754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005960  00000000  00000000  00030630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e25e6  00000000  00000000  00035f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118576  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d68  00000000  00000000  001185bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0011a324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800324c 	.word	0x0800324c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800324c 	.word	0x0800324c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4907      	ldr	r1, [pc, #28]	@ (8000c70 <__NVIC_EnableIRQ+0x38>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	00000000 	.word	0x00000000

08000c78 <main>:
//add .015 to dc voltage
// minus .03 to vpp unless 1vpp


int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
	HAL_Init();
 8000c7e:	f000 fdb8 	bl	80017f2 <HAL_Init>
	SystemClock_Config();
 8000c82:	f000 fca5 	bl	80015d0 <SystemClock_Config>
	ADC_init();
 8000c86:	f000 fb79 	bl	800137c <ADC_init>
	UART_init();
 8000c8a:	f000 fc13 	bl	80014b4 <UART_init>
	TIM_init();
 8000c8e:	f000 fb17 	bl	80012c0 <TIM_init>



	while (1) {

		Calculate_Frequency();
 8000c92:	f000 f9df 	bl	8001054 <Calculate_Frequency>
		if(finished)
 8000c96:	4b5a      	ldr	r3, [pc, #360]	@ (8000e00 <main+0x188>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0f9      	beq.n	8000c92 <main+0x1a>
		{
			UART_print("\033[2J\033[H");
 8000c9e:	4859      	ldr	r0, [pc, #356]	@ (8000e04 <main+0x18c>)
 8000ca0:	f000 fc46 	bl	8001530 <UART_print>
			float voltage = (((float)average / 4096.0) * 3300.0);
 8000ca4:	4b58      	ldr	r3, [pc, #352]	@ (8000e08 <main+0x190>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	ee07 3a90 	vmov	s15, r3
 8000cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cb0:	ee17 0a90 	vmov	r0, s15
 8000cb4:	f7ff fc40 	bl	8000538 <__aeabi_f2d>
 8000cb8:	f04f 0200 	mov.w	r2, #0
 8000cbc:	4b53      	ldr	r3, [pc, #332]	@ (8000e0c <main+0x194>)
 8000cbe:	f7ff fdbd 	bl	800083c <__aeabi_ddiv>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	4619      	mov	r1, r3
 8000cca:	a347      	add	r3, pc, #284	@ (adr r3, 8000de8 <main+0x170>)
 8000ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd0:	f7ff fc8a 	bl	80005e8 <__aeabi_dmul>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	4610      	mov	r0, r2
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f7ff ff5c 	bl	8000b98 <__aeabi_d2f>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	617b      	str	r3, [r7, #20]

			if(DC_voltage)
 8000ce4:	4b4a      	ldr	r3, [pc, #296]	@ (8000e10 <main+0x198>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d024      	beq.n	8000d36 <main+0xbe>
			{
			  UART_print("|-------------DC--------------|\r\n");
 8000cec:	4849      	ldr	r0, [pc, #292]	@ (8000e14 <main+0x19c>)
 8000cee:	f000 fc1f 	bl	8001530 <UART_print>
			  UART_print("\r\n");
 8000cf2:	4849      	ldr	r0, [pc, #292]	@ (8000e18 <main+0x1a0>)
 8000cf4:	f000 fc1c 	bl	8001530 <UART_print>
			  UART_print_float("Voltage: ", voltage / 1000.0);
 8000cf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cfc:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8000e1c <main+0x1a4>
 8000d00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d04:	eeb0 0a47 	vmov.f32	s0, s14
 8000d08:	4845      	ldr	r0, [pc, #276]	@ (8000e20 <main+0x1a8>)
 8000d0a:	f000 f94d 	bl	8000fa8 <UART_print_float>
			  print_hashes((int)(voltage / 100.0));
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	f7ff fc12 	bl	8000538 <__aeabi_f2d>
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	4b42      	ldr	r3, [pc, #264]	@ (8000e24 <main+0x1ac>)
 8000d1a:	f7ff fd8f 	bl	800083c <__aeabi_ddiv>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4610      	mov	r0, r2
 8000d24:	4619      	mov	r1, r3
 8000d26:	f7ff ff0f 	bl	8000b48 <__aeabi_d2iz>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f91c 	bl	8000f6c <print_hashes>
 8000d34:	e04b      	b.n	8000dce <main+0x156>
			}
			else
			{
			  UART_print("|-------------Freq------------|\r\n\r\n");
 8000d36:	483c      	ldr	r0, [pc, #240]	@ (8000e28 <main+0x1b0>)
 8000d38:	f000 fbfa 	bl	8001530 <UART_print>
			  UART_print_int("Hertz: %d Hz\r\n\r\n", hertz);
 8000d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8000e2c <main+0x1b4>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	483b      	ldr	r0, [pc, #236]	@ (8000e30 <main+0x1b8>)
 8000d44:	f000 f966 	bl	8001014 <UART_print_int>
			  UART_print("|-------------AC--------------|\r\n\r\n");
 8000d48:	483a      	ldr	r0, [pc, #232]	@ (8000e34 <main+0x1bc>)
 8000d4a:	f000 fbf1 	bl	8001530 <UART_print>


//			  UART_print_int("max: %d ", max);
//			  UART_print_int("min: %d \r\n", min);
//			  float vpp =  (((((1353.0 * ((float)(max - min))) - 1600.0) / 1000000.0) * 0.625) - 0.1);
			  float vpp = (((float)(max - min)) /4096.9) * 3.3;
 8000d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e38 <main+0x1c0>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b39      	ldr	r3, [pc, #228]	@ (8000e3c <main+0x1c4>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	ee07 3a90 	vmov	s15, r3
 8000d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d62:	ee17 0a90 	vmov	r0, s15
 8000d66:	f7ff fbe7 	bl	8000538 <__aeabi_f2d>
 8000d6a:	a321      	add	r3, pc, #132	@ (adr r3, 8000df0 <main+0x178>)
 8000d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d70:	f7ff fd64 	bl	800083c <__aeabi_ddiv>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4610      	mov	r0, r2
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	a31e      	add	r3, pc, #120	@ (adr r3, 8000df8 <main+0x180>)
 8000d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d82:	f7ff fc31 	bl	80005e8 <__aeabi_dmul>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f7ff ff03 	bl	8000b98 <__aeabi_d2f>
 8000d92:	4603      	mov	r3, r0
 8000d94:	613b      	str	r3, [r7, #16]
//			  UART_print_int("regular vpp: %d \r\n", max - min);
//			  UART_print_int("calibrated vpp: %d \r\n", ((1353 * (max - min)) - 1600) / 10000);
			  UART_print_float("Vpp: ", vpp);
 8000d96:	ed97 0a04 	vldr	s0, [r7, #16]
 8000d9a:	4829      	ldr	r0, [pc, #164]	@ (8000e40 <main+0x1c8>)
 8000d9c:	f000 f904 	bl	8000fa8 <UART_print_float>





			  float RMS_num = calculate_RMS();
 8000da0:	f000 f856 	bl	8000e50 <calculate_RMS>
 8000da4:	ed87 0a03 	vstr	s0, [r7, #12]
			  UART_print_float("RMS Voltage: ", RMS_num );
 8000da8:	ed97 0a03 	vldr	s0, [r7, #12]
 8000dac:	4825      	ldr	r0, [pc, #148]	@ (8000e44 <main+0x1cc>)
 8000dae:	f000 f8fb 	bl	8000fa8 <UART_print_float>
			  print_hashes((int)(RMS_num * 10));
 8000db2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000db6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dc2:	edc7 7a01 	vstr	s15, [r7, #4]
 8000dc6:	793b      	ldrb	r3, [r7, #4]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 f8cf 	bl	8000f6c <print_hashes>
			}
			UART_print("|----|----|----|----|----|----|\r\n");
 8000dce:	481e      	ldr	r0, [pc, #120]	@ (8000e48 <main+0x1d0>)
 8000dd0:	f000 fbae 	bl	8001530 <UART_print>
			UART_print("0   0.5  1.0  1.5  2.0  2.5  3.0");
 8000dd4:	481d      	ldr	r0, [pc, #116]	@ (8000e4c <main+0x1d4>)
 8000dd6:	f000 fbab 	bl	8001530 <UART_print>
			reset();
 8000dda:	f000 fa0d 	bl	80011f8 <reset>
			finished = 0;
 8000dde:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <main+0x188>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
		Calculate_Frequency();
 8000de4:	e755      	b.n	8000c92 <main+0x1a>
 8000de6:	bf00      	nop
 8000de8:	00000000 	.word	0x00000000
 8000dec:	40a9c800 	.word	0x40a9c800
 8000df0:	66666666 	.word	0x66666666
 8000df4:	40b000e6 	.word	0x40b000e6
 8000df8:	66666666 	.word	0x66666666
 8000dfc:	400a6666 	.word	0x400a6666
 8000e00:	2000103e 	.word	0x2000103e
 8000e04:	08003264 	.word	0x08003264
 8000e08:	20001034 	.word	0x20001034
 8000e0c:	40b00000 	.word	0x40b00000
 8000e10:	2000103f 	.word	0x2000103f
 8000e14:	0800326c 	.word	0x0800326c
 8000e18:	08003290 	.word	0x08003290
 8000e1c:	447a0000 	.word	0x447a0000
 8000e20:	08003294 	.word	0x08003294
 8000e24:	40590000 	.word	0x40590000
 8000e28:	080032a0 	.word	0x080032a0
 8000e2c:	2000103c 	.word	0x2000103c
 8000e30:	080032c4 	.word	0x080032c4
 8000e34:	080032d8 	.word	0x080032d8
 8000e38:	2000103a 	.word	0x2000103a
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	080032fc 	.word	0x080032fc
 8000e44:	08003304 	.word	0x08003304
 8000e48:	08003314 	.word	0x08003314
 8000e4c:	08003338 	.word	0x08003338

08000e50 <calculate_RMS>:
	}
}


float calculate_RMS()
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
	float result = 0.0;
 8000e56:	f04f 0300 	mov.w	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
	result = (((float)max / 4096.0) * 3.3);
 8000e5c:	4b40      	ldr	r3, [pc, #256]	@ (8000f60 <calculate_RMS+0x110>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e68:	ee17 0a90 	vmov	r0, s15
 8000e6c:	f7ff fb64 	bl	8000538 <__aeabi_f2d>
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	4b3b      	ldr	r3, [pc, #236]	@ (8000f64 <calculate_RMS+0x114>)
 8000e76:	f7ff fce1 	bl	800083c <__aeabi_ddiv>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	a333      	add	r3, pc, #204	@ (adr r3, 8000f50 <calculate_RMS+0x100>)
 8000e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e88:	f7ff fbae 	bl	80005e8 <__aeabi_dmul>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	f7ff fe80 	bl	8000b98 <__aeabi_d2f>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	607b      	str	r3, [r7, #4]
//	UART_print_float("max to volts: ", result);                     // should be 3 volts
	result = (result / 1.414);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff fb4b 	bl	8000538 <__aeabi_f2d>
 8000ea2:	a32d      	add	r3, pc, #180	@ (adr r3, 8000f58 <calculate_RMS+0x108>)
 8000ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea8:	f7ff fcc8 	bl	800083c <__aeabi_ddiv>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f7ff fe70 	bl	8000b98 <__aeabi_d2f>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	607b      	str	r3, [r7, #4]
//	UART_print_float("divided by 1.414: ", result);                // 2.12
	result *= result;
 8000ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ec0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ec4:	edc7 7a01 	vstr	s15, [r7, #4]
//	UART_print_float("squared: ", result);                         //4.5
//	UART_print_float("voltage: ",(((float)average / 4096.0) * 3.3));		//1.5
	float voltageRMS = (((float)average / 4096.0) * 3.3);
 8000ec8:	4b27      	ldr	r3, [pc, #156]	@ (8000f68 <calculate_RMS+0x118>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ed4:	ee17 0a90 	vmov	r0, s15
 8000ed8:	f7ff fb2e 	bl	8000538 <__aeabi_f2d>
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <calculate_RMS+0x114>)
 8000ee2:	f7ff fcab 	bl	800083c <__aeabi_ddiv>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4610      	mov	r0, r2
 8000eec:	4619      	mov	r1, r3
 8000eee:	a318      	add	r3, pc, #96	@ (adr r3, 8000f50 <calculate_RMS+0x100>)
 8000ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef4:	f7ff fb78 	bl	80005e8 <__aeabi_dmul>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4610      	mov	r0, r2
 8000efe:	4619      	mov	r1, r3
 8000f00:	f7ff fe4a 	bl	8000b98 <__aeabi_d2f>
 8000f04:	4603      	mov	r3, r0
 8000f06:	603b      	str	r3, [r7, #0]
//	UART_print_float("voltage: ",voltageRMS);
	result += (voltageRMS * voltageRMS);
 8000f08:	edd7 7a00 	vldr	s15, [r7]
 8000f0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f10:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f18:	edc7 7a01 	vstr	s15, [r7, #4]
//	UART_print_float("plus voltage squared: ", result);           // 6.75
	result = sqrt(result);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff fb0b 	bl	8000538 <__aeabi_f2d>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	ec43 2b10 	vmov	d0, r2, r3
 8000f2a:	f002 f889 	bl	8003040 <sqrt>
 8000f2e:	ec53 2b10 	vmov	r2, r3, d0
 8000f32:	4610      	mov	r0, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	f7ff fe2f 	bl	8000b98 <__aeabi_d2f>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	607b      	str	r3, [r7, #4]
//	UART_print_float("root: ", result);                           // 2.59
	return result;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	ee07 3a90 	vmov	s15, r3
}
 8000f44:	eeb0 0a67 	vmov.f32	s0, s15
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	66666666 	.word	0x66666666
 8000f54:	400a6666 	.word	0x400a6666
 8000f58:	76c8b439 	.word	0x76c8b439
 8000f5c:	3ff69fbe 	.word	0x3ff69fbe
 8000f60:	2000103a 	.word	0x2000103a
 8000f64:	40b00000 	.word	0x40b00000
 8000f68:	20001034 	.word	0x20001034

08000f6c <print_hashes>:



void print_hashes(uint8_t num)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < num + 1; i++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	e005      	b.n	8000f88 <print_hashes+0x1c>
	{
		UART_print("#");
 8000f7c:	4808      	ldr	r0, [pc, #32]	@ (8000fa0 <print_hashes+0x34>)
 8000f7e:	f000 fad7 	bl	8001530 <UART_print>
	for(uint8_t i = 0; i < num + 1; i++)
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	3301      	adds	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	79fa      	ldrb	r2, [r7, #7]
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d2f5      	bcs.n	8000f7c <print_hashes+0x10>
	}
	UART_print("\r\n");
 8000f90:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <print_hashes+0x38>)
 8000f92:	f000 facd 	bl	8001530 <UART_print>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	0800335c 	.word	0x0800335c
 8000fa4:	08003290 	.word	0x08003290

08000fa8 <UART_print_float>:





void UART_print_float(char *string, float value) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	@ 0x50
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	ed87 0a00 	vstr	s0, [r7]
    char buffer[50];
    int integer_part = (int)value;
 8000fb4:	edd7 7a00 	vldr	s15, [r7]
 8000fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fbc:	ee17 3a90 	vmov	r3, s15
 8000fc0:	647b      	str	r3, [r7, #68]	@ 0x44
    int decimal_part = (int)((value - integer_part) * 1000); // Keep 3 decimal places
 8000fc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fcc:	ed97 7a00 	vldr	s14, [r7]
 8000fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800100c <UART_print_float+0x64>
 8000fd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe0:	ee17 3a90 	vmov	r3, s15
 8000fe4:	643b      	str	r3, [r7, #64]	@ 0x40
    sprintf(buffer, "%s%d.%03d V\r\n\r\n", string, integer_part, decimal_part);
 8000fe6:	f107 000c 	add.w	r0, r7, #12
 8000fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	4907      	ldr	r1, [pc, #28]	@ (8001010 <UART_print_float+0x68>)
 8000ff4:	f001 fb84 	bl	8002700 <siprintf>
    UART_print(buffer);
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fa97 	bl	8001530 <UART_print>
}
 8001002:	bf00      	nop
 8001004:	3748      	adds	r7, #72	@ 0x48
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	447a0000 	.word	0x447a0000
 8001010:	08003360 	.word	0x08003360

08001014 <UART_print_int>:



void UART_print_int(char *string, uint16_t value)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b09c      	sub	sp, #112	@ 0x70
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
	char stringify[100] = {0};
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	2260      	movs	r2, #96	@ 0x60
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f001 fb87 	bl	8002740 <memset>
	sprintf(stringify,string ,value);
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4618      	mov	r0, r3
 800103c:	f001 fb60 	bl	8002700 <siprintf>
	UART_print(stringify);
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fa73 	bl	8001530 <UART_print>
}
 800104a:	bf00      	nop
 800104c:	3770      	adds	r7, #112	@ 0x70
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <Calculate_Frequency>:


void Calculate_Frequency()
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
	if((value_count < TOTAL_DATA_COUNT) & conversion_ready) //for when collecting data
 800105a:	4b5c      	ldr	r3, [pc, #368]	@ (80011cc <Calculate_Frequency+0x178>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001062:	4293      	cmp	r3, r2
 8001064:	bf94      	ite	ls
 8001066:	2301      	movls	r3, #1
 8001068:	2300      	movhi	r3, #0
 800106a:	b2db      	uxtb	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	4b58      	ldr	r3, [pc, #352]	@ (80011d0 <Calculate_Frequency+0x17c>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	4013      	ands	r3, r2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00e      	beq.n	8001096 <Calculate_Frequency+0x42>
	{
	  values[value_count++] = reading_data;
 8001078:	4b54      	ldr	r3, [pc, #336]	@ (80011cc <Calculate_Frequency+0x178>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	b291      	uxth	r1, r2
 8001080:	4a52      	ldr	r2, [pc, #328]	@ (80011cc <Calculate_Frequency+0x178>)
 8001082:	8011      	strh	r1, [r2, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b53      	ldr	r3, [pc, #332]	@ (80011d4 <Calculate_Frequency+0x180>)
 8001088:	8819      	ldrh	r1, [r3, #0]
 800108a:	4b53      	ldr	r3, [pc, #332]	@ (80011d8 <Calculate_Frequency+0x184>)
 800108c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  conversion_ready = 0;
 8001090:	4b4f      	ldr	r3, [pc, #316]	@ (80011d0 <Calculate_Frequency+0x17c>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
	}
	if(value_count >= TOTAL_DATA_COUNT) // process data and reset
 8001096:	4b4d      	ldr	r3, [pc, #308]	@ (80011cc <Calculate_Frequency+0x178>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800109e:	f0c0 808f 	bcc.w	80011c0 <Calculate_Frequency+0x16c>
	{
	  for(uint32_t i = 0; i < TOTAL_DATA_COUNT; i++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	e028      	b.n	80010fa <Calculate_Frequency+0xa6>
	  {
		  if(values[i] < min)
 80010a8:	4a4b      	ldr	r2, [pc, #300]	@ (80011d8 <Calculate_Frequency+0x184>)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80010b0:	4b4a      	ldr	r3, [pc, #296]	@ (80011dc <Calculate_Frequency+0x188>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d205      	bcs.n	80010c4 <Calculate_Frequency+0x70>
		  {
			  min = values[i];
 80010b8:	4a47      	ldr	r2, [pc, #284]	@ (80011d8 <Calculate_Frequency+0x184>)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80010c0:	4b46      	ldr	r3, [pc, #280]	@ (80011dc <Calculate_Frequency+0x188>)
 80010c2:	801a      	strh	r2, [r3, #0]
		  }
		  if(values[i] > max)
 80010c4:	4a44      	ldr	r2, [pc, #272]	@ (80011d8 <Calculate_Frequency+0x184>)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80010cc:	4b44      	ldr	r3, [pc, #272]	@ (80011e0 <Calculate_Frequency+0x18c>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d905      	bls.n	80010e0 <Calculate_Frequency+0x8c>
		  {
			  max = values[i];
 80010d4:	4a40      	ldr	r2, [pc, #256]	@ (80011d8 <Calculate_Frequency+0x184>)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80010dc:	4b40      	ldr	r3, [pc, #256]	@ (80011e0 <Calculate_Frequency+0x18c>)
 80010de:	801a      	strh	r2, [r3, #0]
		  }
		  average += values[i];
 80010e0:	4a3d      	ldr	r2, [pc, #244]	@ (80011d8 <Calculate_Frequency+0x184>)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b3e      	ldr	r3, [pc, #248]	@ (80011e4 <Calculate_Frequency+0x190>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a3c      	ldr	r2, [pc, #240]	@ (80011e4 <Calculate_Frequency+0x190>)
 80010f2:	6013      	str	r3, [r2, #0]
	  for(uint32_t i = 0; i < TOTAL_DATA_COUNT; i++)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3301      	adds	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001100:	d3d2      	bcc.n	80010a8 <Calculate_Frequency+0x54>

	  }
	  average /= TOTAL_DATA_COUNT;
 8001102:	4b38      	ldr	r3, [pc, #224]	@ (80011e4 <Calculate_Frequency+0x190>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a38      	ldr	r2, [pc, #224]	@ (80011e8 <Calculate_Frequency+0x194>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	09db      	lsrs	r3, r3, #7
 800110e:	4a35      	ldr	r2, [pc, #212]	@ (80011e4 <Calculate_Frequency+0x190>)
 8001110:	6013      	str	r3, [r2, #0]




	  uint8_t above_average = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	72fb      	strb	r3, [r7, #11]

	  if(values[0] > average)
 8001116:	4b30      	ldr	r3, [pc, #192]	@ (80011d8 <Calculate_Frequency+0x184>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	4b31      	ldr	r3, [pc, #196]	@ (80011e4 <Calculate_Frequency+0x190>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d902      	bls.n	800112a <Calculate_Frequency+0xd6>
	  {
		  above_average = 1;
 8001124:	2301      	movs	r3, #1
 8001126:	72fb      	strb	r3, [r7, #11]
 8001128:	e001      	b.n	800112e <Calculate_Frequency+0xda>
	  }
	  else
	  {
		  above_average = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	72fb      	strb	r3, [r7, #11]
	  }



	  for(uint32_t i = 0; i < TOTAL_DATA_COUNT; i++)
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	e038      	b.n	80011a6 <Calculate_Frequency+0x152>
	  {
		  if(above_average & (values[i] < average))
 8001134:	7afb      	ldrb	r3, [r7, #11]
 8001136:	4928      	ldr	r1, [pc, #160]	@ (80011d8 <Calculate_Frequency+0x184>)
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800113e:	4611      	mov	r1, r2
 8001140:	4a28      	ldr	r2, [pc, #160]	@ (80011e4 <Calculate_Frequency+0x190>)
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	4291      	cmp	r1, r2
 8001146:	bf34      	ite	cc
 8001148:	2201      	movcc	r2, #1
 800114a:	2200      	movcs	r2, #0
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	4013      	ands	r3, r2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d007      	beq.n	8001164 <Calculate_Frequency+0x110>
		  {
			  above_average = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	72fb      	strb	r3, [r7, #11]
			  cross_count++;
 8001158:	4b24      	ldr	r3, [pc, #144]	@ (80011ec <Calculate_Frequency+0x198>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	3301      	adds	r3, #1
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <Calculate_Frequency+0x198>)
 8001162:	801a      	strh	r2, [r3, #0]
		  }
		  if(!above_average & (values[i] > average))
 8001164:	7afb      	ldrb	r3, [r7, #11]
 8001166:	2b00      	cmp	r3, #0
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2da      	uxtb	r2, r3
 8001170:	4919      	ldr	r1, [pc, #100]	@ (80011d8 <Calculate_Frequency+0x184>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001178:	4619      	mov	r1, r3
 800117a:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <Calculate_Frequency+0x190>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4299      	cmp	r1, r3
 8001180:	bf8c      	ite	hi
 8001182:	2301      	movhi	r3, #1
 8001184:	2300      	movls	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4013      	ands	r3, r2
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d007      	beq.n	80011a0 <Calculate_Frequency+0x14c>
		  {
			  above_average = 1;
 8001190:	2301      	movs	r3, #1
 8001192:	72fb      	strb	r3, [r7, #11]
			  cross_count++;
 8001194:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <Calculate_Frequency+0x198>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	b29a      	uxth	r2, r3
 800119c:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <Calculate_Frequency+0x198>)
 800119e:	801a      	strh	r2, [r3, #0]
	  for(uint32_t i = 0; i < TOTAL_DATA_COUNT; i++)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3301      	adds	r3, #1
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80011ac:	d3c2      	bcc.n	8001134 <Calculate_Frequency+0xe0>
		  }
	  }

	  hertz = (cross_count / 2);
 80011ae:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <Calculate_Frequency+0x198>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	085b      	lsrs	r3, r3, #1
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <Calculate_Frequency+0x19c>)
 80011b8:	801a      	strh	r2, [r3, #0]
	  finished = 1;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <Calculate_Frequency+0x1a0>)
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]

	}
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	20001030 	.word	0x20001030
 80011d0:	2000008c 	.word	0x2000008c
 80011d4:	2000008e 	.word	0x2000008e
 80011d8:	20000090 	.word	0x20000090
 80011dc:	20000000 	.word	0x20000000
 80011e0:	2000103a 	.word	0x2000103a
 80011e4:	20001034 	.word	0x20001034
 80011e8:	10624dd3 	.word	0x10624dd3
 80011ec:	20001038 	.word	0x20001038
 80011f0:	2000103c 	.word	0x2000103c
 80011f4:	2000103e 	.word	0x2000103e

080011f8 <reset>:

void reset()
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
	average = 0;
 80011fe:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <reset+0x68>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
	conversion_ready = 0;
 8001204:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <reset+0x6c>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
	value_count = 0;
 800120a:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <reset+0x70>)
 800120c:	2200      	movs	r2, #0
 800120e:	801a      	strh	r2, [r3, #0]
	cross_count = 0;
 8001210:	4b16      	ldr	r3, [pc, #88]	@ (800126c <reset+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	801a      	strh	r2, [r3, #0]
	min = 50000;
 8001216:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <reset+0x78>)
 8001218:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800121c:	801a      	strh	r2, [r3, #0]
	max = 0;
 800121e:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <reset+0x7c>)
 8001220:	2200      	movs	r2, #0
 8001222:	801a      	strh	r2, [r3, #0]
	hertz = 0;
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <reset+0x80>)
 8001226:	2200      	movs	r2, #0
 8001228:	801a      	strh	r2, [r3, #0]
	RMS_value = 0.0;
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <reset+0x84>)
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
	voltage = 0.0;
 8001232:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <reset+0x88>)
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < 20000; i++) {}
 800123a:	2300      	movs	r3, #0
 800123c:	80fb      	strh	r3, [r7, #6]
 800123e:	e002      	b.n	8001246 <reset+0x4e>
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	3301      	adds	r3, #1
 8001244:	80fb      	strh	r3, [r7, #6]
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800124c:	4293      	cmp	r3, r2
 800124e:	d9f7      	bls.n	8001240 <reset+0x48>
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20001034 	.word	0x20001034
 8001264:	2000008c 	.word	0x2000008c
 8001268:	20001030 	.word	0x20001030
 800126c:	20001038 	.word	0x20001038
 8001270:	20000000 	.word	0x20000000
 8001274:	2000103a 	.word	0x2000103a
 8001278:	2000103c 	.word	0x2000103c
 800127c:	20001040 	.word	0x20001040
 8001280:	20001044 	.word	0x20001044

08001284 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void) {
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  if (TIM2->SR & TIM_SR_UIF) {
 8001288:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00d      	beq.n	80012b2 <TIM2_IRQHandler+0x2e>
    TIM2->SR &= ~(TIM_SR_UIF);
 8001296:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012a0:	f023 0301 	bic.w	r3, r3, #1
 80012a4:	6113      	str	r3, [r2, #16]
    //Start a conversion
    ADC1->CR |= ADC_CR_ADSTART;
 80012a6:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <TIM2_IRQHandler+0x38>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <TIM2_IRQHandler+0x38>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6093      	str	r3, [r2, #8]
  }

}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	50040000 	.word	0x50040000

080012c0 <TIM_init>:

void TIM_init(void) {
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  // Turn on timer TIM2 RCC
  RCC->APB1ENR1 |= (RCC_APB1ENR1_TIM2EN);
 80012c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <TIM_init+0x70>)
 80012c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c8:	4a19      	ldr	r2, [pc, #100]	@ (8001330 <TIM_init+0x70>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6593      	str	r3, [r2, #88]	@ 0x58
  // ARR Timer Length Set to Sample Speed 5 - 1
  TIM2->ARR = 12000 - 1;
 80012d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012d4:	f642 62df 	movw	r2, #11999	@ 0x2edf
 80012d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Update Interrupt Enable
  TIM2->DIER |= (TIM_DIER_UIE);
 80012da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	60d3      	str	r3, [r2, #12]
  // Clear interrupt status register for update event
  TIM2->SR &= ~(TIM_SR_UIF);
 80012ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f4:	f023 0301 	bic.w	r3, r3, #1
 80012f8:	6113      	str	r3, [r2, #16]
  // Start the timer / counter
  TIM2->CR1 |= TIM_CR1_CEN;
 80012fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6013      	str	r3, [r2, #0]
  // Count-Up Mode for TIM2
  TIM2->CR1 &= ~(TIM_CR1_DIR);
 800130a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001314:	f023 0310 	bic.w	r3, r3, #16
 8001318:	6013      	str	r3, [r2, #0]
  // Enable interrupts for TIM2 in NVIC
  NVIC->ISER[0] = (1 << TIM2_IRQn);
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <TIM_init+0x74>)
 800131c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001320:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001322:	b662      	cpsie	i
}
 8001324:	bf00      	nop
  // Enable interrupts globally
  __enable_irq();

}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40021000 	.word	0x40021000
 8001334:	e000e100 	.word	0xe000e100

08001338 <ADC1_2_IRQHandler>:




void ADC1_2_IRQHandler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
	//check to see if conversion is done
	if(ADC1->ISR & ADC_ISR_EOC)
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <ADC1_2_IRQHandler+0x38>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00d      	beq.n	8001364 <ADC1_2_IRQHandler+0x2c>
	{
		//clear flag, set global variable and read into another global variable
		ADC1->ISR &= ~ADC_ISR_EOC;
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <ADC1_2_IRQHandler+0x38>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a08      	ldr	r2, [pc, #32]	@ (8001370 <ADC1_2_IRQHandler+0x38>)
 800134e:	f023 0304 	bic.w	r3, r3, #4
 8001352:	6013      	str	r3, [r2, #0]
		conversion_ready = 1;
 8001354:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <ADC1_2_IRQHandler+0x3c>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
		reading_data = ADC1->DR;
 800135a:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <ADC1_2_IRQHandler+0x38>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <ADC1_2_IRQHandler+0x40>)
 8001362:	801a      	strh	r2, [r3, #0]
	}
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	50040000 	.word	0x50040000
 8001374:	2000008c 	.word	0x2000008c
 8001378:	2000008e 	.word	0x2000008e

0800137c <ADC_init>:


void ADC_init(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
    // Enable the ADC clock
    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 8001382:	4b49      	ldr	r3, [pc, #292]	@ (80014a8 <ADC_init+0x12c>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	4a48      	ldr	r2, [pc, #288]	@ (80014a8 <ADC_init+0x12c>)
 8001388:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800138c:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // Set ADC clock to synchronous HCLK / 1
    ADC123_COMMON->CCR = (1 << ADC_CCR_CKMODE_Pos);
 800138e:	4b47      	ldr	r3, [pc, #284]	@ (80014ac <ADC_init+0x130>)
 8001390:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001394:	609a      	str	r2, [r3, #8]

    // Power up the ADC and voltage regulator
    ADC1->CR &= ~ADC_CR_DEEPPWD;
 8001396:	4b46      	ldr	r3, [pc, #280]	@ (80014b0 <ADC_init+0x134>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	4a45      	ldr	r2, [pc, #276]	@ (80014b0 <ADC_init+0x134>)
 800139c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80013a0:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADVREGEN;
 80013a2:	4b43      	ldr	r3, [pc, #268]	@ (80014b0 <ADC_init+0x134>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	4a42      	ldr	r2, [pc, #264]	@ (80014b0 <ADC_init+0x134>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	6093      	str	r3, [r2, #8]

    // Wait for 20 µs for the voltage regulator to stabilize
    for (uint32_t i = 0; i < 50000; i++);
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	e002      	b.n	80013ba <ADC_init+0x3e>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3301      	adds	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d9f7      	bls.n	80013b4 <ADC_init+0x38>

    // Configure PA0 as analog input
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80013c4:	4b38      	ldr	r3, [pc, #224]	@ (80014a8 <ADC_init+0x12c>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c8:	4a37      	ldr	r2, [pc, #220]	@ (80014a8 <ADC_init+0x12c>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIOA->MODER |= (GPIO_MODER_MODE0);  // PA0 in analog mode
 80013d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013da:	f043 0303 	orr.w	r3, r3, #3
 80013de:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD0);
 80013e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013ea:	f023 0303 	bic.w	r3, r3, #3
 80013ee:	60d3      	str	r3, [r2, #12]
    GPIOA->ASCR |= GPIO_ASCR_ASC0;  // Enable analog switch for PA0
 80013f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Single-ended mode for channel 5 (PA0)
    ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5);
 8001400:	4b2b      	ldr	r3, [pc, #172]	@ (80014b0 <ADC_init+0x134>)
 8001402:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001406:	4a2a      	ldr	r2, [pc, #168]	@ (80014b0 <ADC_init+0x134>)
 8001408:	f023 0320 	bic.w	r3, r3, #32
 800140c:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    // Calibrate the ADC
    ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF); // Ensure ADC is disabled and single-ended calibration
 8001410:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <ADC_init+0x134>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	4a26      	ldr	r2, [pc, #152]	@ (80014b0 <ADC_init+0x134>)
 8001416:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADCAL;
 8001420:	4b23      	ldr	r3, [pc, #140]	@ (80014b0 <ADC_init+0x134>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a22      	ldr	r2, [pc, #136]	@ (80014b0 <ADC_init+0x134>)
 8001426:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800142a:	6093      	str	r3, [r2, #8]
    while (ADC1->CR & ADC_CR_ADCAL); // Wait for calibration to complete
 800142c:	bf00      	nop
 800142e:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <ADC_init+0x134>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	dbfb      	blt.n	800142e <ADC_init+0xb2>

    // Enable the ADC
    ADC1->ISR |= (ADC_ISR_ADRDY); // Clear ready bit
 8001436:	4b1e      	ldr	r3, [pc, #120]	@ (80014b0 <ADC_init+0x134>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a1d      	ldr	r2, [pc, #116]	@ (80014b0 <ADC_init+0x134>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6013      	str	r3, [r2, #0]
    ADC1->CR |= (ADC_CR_ADEN);
 8001442:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <ADC_init+0x134>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	4a1a      	ldr	r2, [pc, #104]	@ (80014b0 <ADC_init+0x134>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY)); // Wait for ADC to be ready
 800144e:	bf00      	nop
 8001450:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <ADC_init+0x134>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f9      	beq.n	8001450 <ADC_init+0xd4>

    // Configure sequence for single channel (channel 5)
    ADC1->SQR1 = (5 << ADC_SQR1_SQ1_Pos);
 800145c:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <ADC_init+0x134>)
 800145e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001462:	631a      	str	r2, [r3, #48]	@ 0x30

    // Configure for single conversion, 12-bit resolution, right-aligned data
    ADC1->CFGR = 0;
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <ADC_init+0x134>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]

    // Configure sample time to 2.5 ADC clock cycles
    ADC1->SMPR1 &= ~(ADC_SMPR1_SMP5);
 800146a:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <ADC_init+0x134>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	4a10      	ldr	r2, [pc, #64]	@ (80014b0 <ADC_init+0x134>)
 8001470:	f423 3360 	bic.w	r3, r3, #229376	@ 0x38000
 8001474:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1 |= (0 << ADC_SMPR1_SMP5_Pos); // 2.5 cycles for channel 5
 8001476:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <ADC_init+0x134>)
 8001478:	4a0d      	ldr	r2, [pc, #52]	@ (80014b0 <ADC_init+0x134>)
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	6153      	str	r3, [r2, #20]

    // Enable end-of-conversion interrupt
    ADC1->IER |= (ADC_IER_EOC);
 800147e:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <ADC_init+0x134>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4a0b      	ldr	r2, [pc, #44]	@ (80014b0 <ADC_init+0x134>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6053      	str	r3, [r2, #4]
    // Enable ADC interrupt in NVIC
    NVIC_EnableIRQ(ADC1_2_IRQn);
 800148a:	2012      	movs	r0, #18
 800148c:	f7ff fbd4 	bl	8000c38 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001490:	b662      	cpsie	i
}
 8001492:	bf00      	nop
    __enable_irq();
    ADC1->CR |= ADC_CR_ADSTART;
 8001494:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <ADC_init+0x134>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4a05      	ldr	r2, [pc, #20]	@ (80014b0 <ADC_init+0x134>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	6093      	str	r3, [r2, #8]

}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	50040300 	.word	0x50040300
 80014b0:	50040000 	.word	0x50040000

080014b4 <UART_init>:



void UART_init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	 // Enable clocks for GPIOA and USART2
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;   // Enable GPIOA clock
 80014b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <UART_init+0x74>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001528 <UART_init+0x74>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN; // Enable USART2 clock
 80014c4:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <UART_init+0x74>)
 80014c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c8:	4a17      	ldr	r2, [pc, #92]	@ (8001528 <UART_init+0x74>)
 80014ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ce:	6593      	str	r3, [r2, #88]	@ 0x58

	// Configure PA2 as USART2_TX and PA3 as USART2_RX
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3); // Clear mode bits
 80014d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80014da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014de:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1); // Set alternate function mode
 80014e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80014ea:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80014ee:	6013      	str	r3, [r2, #0]

//	GPIOA->AFR[0] |= ~(GPIO_AFRL_AFSEL2_3);  // Set AF7 (USART2) for PA2
//	GPIOA->AFR[0] |= ~(GPIO_AFRL_AFSEL3_3); // Set AF7 (USART2) for PA3

	GPIOA->AFR[0] |= (0x7 << GPIO_AFRL_AFSEL2_Pos); // Set AF7 (USART2) for PA2
 80014f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80014fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x7 << GPIO_AFRL_AFSEL3_Pos); // Set AF7 (USART2) for PA3
 8001500:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800150a:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800150e:	6213      	str	r3, [r2, #32]

	// Configure USART2 for 115200 baud rate (assuming 4 MHz clock)
	USART2->BRR = 208; // Set baud rate divisor for 115200 baud (4 MHz / (16 * 115200) ≈ 35)
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <UART_init+0x78>)
 8001512:	22d0      	movs	r2, #208	@ 0xd0
 8001514:	60da      	str	r2, [r3, #12]

	// Enable USART2, transmitter, and receiver and receive data register
	USART2->CR1 = (USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE);
 8001516:	4b05      	ldr	r3, [pc, #20]	@ (800152c <UART_init+0x78>)
 8001518:	222d      	movs	r2, #45	@ 0x2d
 800151a:	601a      	str	r2, [r3, #0]
	//enable interrupts
	NVIC_EnableIRQ(USART2_IRQn);
 800151c:	2026      	movs	r0, #38	@ 0x26
 800151e:	f7ff fb8b 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	40004400 	.word	0x40004400

08001530 <UART_print>:

void UART_print(char *str)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	while (*str != '\0') 												// Loop until the end of the string
 8001538:	e00c      	b.n	8001554 <UART_print+0x24>
	{
		while (!(USART2->ISR & USART_ISR_TXE)) {}
 800153a:	bf00      	nop
 800153c:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <UART_print+0x3c>)
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f9      	beq.n	800153c <UART_print+0xc>
		USART2->TDR = *str++;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	781a      	ldrb	r2, [r3, #0]
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <UART_print+0x3c>)
 8001552:	851a      	strh	r2, [r3, #40]	@ 0x28
	while (*str != '\0') 												// Loop until the end of the string
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1ee      	bne.n	800153a <UART_print+0xa>
	}

}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40004400 	.word	0x40004400

08001570 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0

	//if receiving data interrupt
	if(USART2->ISR & USART_ISR_RXNE)
 8001576:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <USART2_IRQHandler+0x54>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 0320 	and.w	r3, r3, #32
 800157e:	2b00      	cmp	r3, #0
 8001580:	d01c      	beq.n	80015bc <USART2_IRQHandler+0x4c>
	{
		char single[2];
		//put input anded with the read register into a variable
		sprintf(single,"%c", (char)(USART2->RDR & USART_RDR_RDR));
 8001582:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <USART2_IRQHandler+0x54>)
 8001584:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001586:	b29b      	uxth	r3, r3
 8001588:	b2db      	uxtb	r3, r3
 800158a:	461a      	mov	r2, r3
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	490e      	ldr	r1, [pc, #56]	@ (80015c8 <USART2_IRQHandler+0x58>)
 8001590:	4618      	mov	r0, r3
 8001592:	f001 f8b5 	bl	8002700 <siprintf>

		if(single[0] == 's')
 8001596:	793b      	ldrb	r3, [r7, #4]
 8001598:	2b73      	cmp	r3, #115	@ 0x73
 800159a:	d109      	bne.n	80015b0 <USART2_IRQHandler+0x40>
		{
			DC_voltage = DC_voltage ? 0 : 1;
 800159c:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <USART2_IRQHandler+0x5c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	bf0c      	ite	eq
 80015a4:	2301      	moveq	r3, #1
 80015a6:	2300      	movne	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <USART2_IRQHandler+0x5c>)
 80015ae:	701a      	strb	r2, [r3, #0]
		}
		USART2->ISR &= ~(USART_ISR_RXNE);
 80015b0:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <USART2_IRQHandler+0x54>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	4a03      	ldr	r2, [pc, #12]	@ (80015c4 <USART2_IRQHandler+0x54>)
 80015b6:	f023 0320 	bic.w	r3, r3, #32
 80015ba:	61d3      	str	r3, [r2, #28]
	}

}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40004400 	.word	0x40004400
 80015c8:	08003370 	.word	0x08003370
 80015cc:	2000103f 	.word	0x2000103f

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b096      	sub	sp, #88	@ 0x58
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	2244      	movs	r2, #68	@ 0x44
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 f8ae 	bl	8002740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	463b      	mov	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015f6:	f000 fa65 	bl	8001ac4 <HAL_PWREx_ControlVoltageScaling>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001600:	f000 f82c 	bl	800165c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001604:	2310      	movs	r3, #16
 8001606:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001608:	2301      	movs	r3, #1
 800160a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8001610:	2390      	movs	r3, #144	@ 0x90
 8001612:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001614:	2300      	movs	r3, #0
 8001616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4618      	mov	r0, r3
 800161e:	f000 faa7 	bl	8001b70 <HAL_RCC_OscConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001628:	f000 f818 	bl	800165c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162c:	230f      	movs	r3, #15
 800162e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001640:	463b      	mov	r3, r7
 8001642:	2101      	movs	r1, #1
 8001644:	4618      	mov	r0, r3
 8001646:	f000 fe6f 	bl	8002328 <HAL_RCC_ClockConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001650:	f000 f804 	bl	800165c <Error_Handler>
  }
}
 8001654:	bf00      	nop
 8001656:	3758      	adds	r7, #88	@ 0x58
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <Error_Handler+0x8>

08001668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <HAL_MspInit+0x44>)
 8001670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001672:	4a0e      	ldr	r2, [pc, #56]	@ (80016ac <HAL_MspInit+0x44>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6613      	str	r3, [r2, #96]	@ 0x60
 800167a:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <HAL_MspInit+0x44>)
 800167c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <HAL_MspInit+0x44>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168a:	4a08      	ldr	r2, [pc, #32]	@ (80016ac <HAL_MspInit+0x44>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001690:	6593      	str	r3, [r2, #88]	@ 0x58
 8001692:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_MspInit+0x44>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000

080016b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <NMI_Handler+0x4>

080016b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <MemManage_Handler+0x4>

080016c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <BusFault_Handler+0x4>

080016d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <UsageFault_Handler+0x4>

080016d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001706:	f000 f8c9 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001718:	4a14      	ldr	r2, [pc, #80]	@ (800176c <_sbrk+0x5c>)
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <_sbrk+0x60>)
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001724:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800172c:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <_sbrk+0x64>)
 800172e:	4a12      	ldr	r2, [pc, #72]	@ (8001778 <_sbrk+0x68>)
 8001730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001732:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	429a      	cmp	r2, r3
 800173e:	d207      	bcs.n	8001750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001740:	f001 f806 	bl	8002750 <__errno>
 8001744:	4603      	mov	r3, r0
 8001746:	220c      	movs	r2, #12
 8001748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800174e:	e009      	b.n	8001764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001750:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001756:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	4a05      	ldr	r2, [pc, #20]	@ (8001774 <_sbrk+0x64>)
 8001760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20018000 	.word	0x20018000
 8001770:	00000400 	.word	0x00000400
 8001774:	20001048 	.word	0x20001048
 8001778:	20001198 	.word	0x20001198

0800177c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <SystemInit+0x20>)
 8001782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001786:	4a05      	ldr	r2, [pc, #20]	@ (800179c <SystemInit+0x20>)
 8001788:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800178c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a4:	f7ff ffea 	bl	800177c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a8:	480c      	ldr	r0, [pc, #48]	@ (80017dc <LoopForever+0x6>)
  ldr r1, =_edata
 80017aa:	490d      	ldr	r1, [pc, #52]	@ (80017e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017ac:	4a0d      	ldr	r2, [pc, #52]	@ (80017e4 <LoopForever+0xe>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b0:	e002      	b.n	80017b8 <LoopCopyDataInit>

080017b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b6:	3304      	adds	r3, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017bc:	d3f9      	bcc.n	80017b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017be:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017c0:	4c0a      	ldr	r4, [pc, #40]	@ (80017ec <LoopForever+0x16>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c4:	e001      	b.n	80017ca <LoopFillZerobss>

080017c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c8:	3204      	adds	r2, #4

080017ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017cc:	d3fb      	bcc.n	80017c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ce:	f000 ffc5 	bl	800275c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017d2:	f7ff fa51 	bl	8000c78 <main>

080017d6 <LoopForever>:

LoopForever:
    b LoopForever
 80017d6:	e7fe      	b.n	80017d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017e4:	080033f8 	.word	0x080033f8
  ldr r2, =_sbss
 80017e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017ec:	20001198 	.word	0x20001198

080017f0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017f0:	e7fe      	b.n	80017f0 <ADC3_IRQHandler>

080017f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 f91f 	bl	8001a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001802:	200f      	movs	r0, #15
 8001804:	f000 f80e 	bl	8001824 <HAL_InitTick>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	e001      	b.n	8001818 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001814:	f7ff ff28 	bl	8001668 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001818:	79fb      	ldrb	r3, [r7, #7]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001830:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <HAL_InitTick+0x6c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d023      	beq.n	8001880 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001838:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <HAL_InitTick+0x70>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <HAL_InitTick+0x6c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4619      	mov	r1, r3
 8001842:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001846:	fbb3 f3f1 	udiv	r3, r3, r1
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f91d 	bl	8001a8e <HAL_SYSTICK_Config>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10f      	bne.n	800187a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b0f      	cmp	r3, #15
 800185e:	d809      	bhi.n	8001874 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001860:	2200      	movs	r2, #0
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001868:	f000 f8f5 	bl	8001a56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800186c:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <HAL_InitTick+0x74>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e007      	b.n	8001884 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e004      	b.n	8001884 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	e001      	b.n	8001884 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001884:	7bfb      	ldrb	r3, [r7, #15]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000000c 	.word	0x2000000c
 8001894:	20000004 	.word	0x20000004
 8001898:	20000008 	.word	0x20000008

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	2000000c 	.word	0x2000000c
 80018c0:	2000104c 	.word	0x2000104c

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	2000104c 	.word	0x2000104c

080018dc <__NVIC_SetPriorityGrouping>:
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_GetPriorityGrouping>:
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001928:	4b04      	ldr	r3, [pc, #16]	@ (800193c <__NVIC_GetPriorityGrouping+0x18>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	f003 0307 	and.w	r3, r3, #7
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	2b00      	cmp	r3, #0
 8001952:	db0a      	blt.n	800196a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	490c      	ldr	r1, [pc, #48]	@ (800198c <__NVIC_SetPriority+0x4c>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	0112      	lsls	r2, r2, #4
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	440b      	add	r3, r1
 8001964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001968:	e00a      	b.n	8001980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4908      	ldr	r1, [pc, #32]	@ (8001990 <__NVIC_SetPriority+0x50>)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	3b04      	subs	r3, #4
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	440b      	add	r3, r1
 800197e:	761a      	strb	r2, [r3, #24]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000e100 	.word	0xe000e100
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	@ 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f1c3 0307 	rsb	r3, r3, #7
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	bf28      	it	cs
 80019b2:	2304      	movcs	r3, #4
 80019b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3304      	adds	r3, #4
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d902      	bls.n	80019c4 <NVIC_EncodePriority+0x30>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3b03      	subs	r3, #3
 80019c2:	e000      	b.n	80019c6 <NVIC_EncodePriority+0x32>
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	401a      	ands	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	4313      	orrs	r3, r2
         );
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3724      	adds	r7, #36	@ 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a0c:	d301      	bcc.n	8001a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00f      	b.n	8001a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a12:	4a0a      	ldr	r2, [pc, #40]	@ (8001a3c <SysTick_Config+0x40>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a20:	f7ff ff8e 	bl	8001940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <SysTick_Config+0x40>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2a:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <SysTick_Config+0x40>)
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	e000e010 	.word	0xe000e010

08001a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff47 	bl	80018dc <__NVIC_SetPriorityGrouping>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a68:	f7ff ff5c 	bl	8001924 <__NVIC_GetPriorityGrouping>
 8001a6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	6978      	ldr	r0, [r7, #20]
 8001a74:	f7ff ff8e 	bl	8001994 <NVIC_EncodePriority>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff5d 	bl	8001940 <__NVIC_SetPriority>
}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ffb0 	bl	80019fc <SysTick_Config>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001aac:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ad2:	d130      	bne.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad4:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ae0:	d038      	beq.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae2:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001aea:	4a1e      	ldr	r2, [pc, #120]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001af0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001af2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2232      	movs	r2, #50	@ 0x32
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	4a1b      	ldr	r2, [pc, #108]	@ (8001b6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	0c9b      	lsrs	r3, r3, #18
 8001b04:	3301      	adds	r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b08:	e002      	b.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b10:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b1c:	d102      	bne.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f2      	bne.n	8001b0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b30:	d110      	bne.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e00f      	b.n	8001b56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b36:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b42:	d007      	beq.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b44:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b4c:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40007000 	.word	0x40007000
 8001b68:	20000004 	.word	0x20000004
 8001b6c:	431bde83 	.word	0x431bde83

08001b70 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e3ca      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b82:	4b97      	ldr	r3, [pc, #604]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b8c:	4b94      	ldr	r3, [pc, #592]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80e4 	beq.w	8001d6c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_RCC_OscConfig+0x4a>
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b0c      	cmp	r3, #12
 8001bae:	f040 808b 	bne.w	8001cc8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	f040 8087 	bne.w	8001cc8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bba:	4b89      	ldr	r3, [pc, #548]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x62>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e3a2      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1a      	ldr	r2, [r3, #32]
 8001bd6:	4b82      	ldr	r3, [pc, #520]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d004      	beq.n	8001bec <HAL_RCC_OscConfig+0x7c>
 8001be2:	4b7f      	ldr	r3, [pc, #508]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bea:	e005      	b.n	8001bf8 <HAL_RCC_OscConfig+0x88>
 8001bec:	4b7c      	ldr	r3, [pc, #496]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bf2:	091b      	lsrs	r3, r3, #4
 8001bf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d223      	bcs.n	8001c44 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 fd1d 	bl	8002640 <RCC_SetFlashLatencyFromMSIRange>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e383      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c10:	4b73      	ldr	r3, [pc, #460]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a72      	ldr	r2, [pc, #456]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c16:	f043 0308 	orr.w	r3, r3, #8
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	4b70      	ldr	r3, [pc, #448]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	496d      	ldr	r1, [pc, #436]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c2e:	4b6c      	ldr	r3, [pc, #432]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	021b      	lsls	r3, r3, #8
 8001c3c:	4968      	ldr	r1, [pc, #416]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
 8001c42:	e025      	b.n	8001c90 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c44:	4b66      	ldr	r3, [pc, #408]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a65      	ldr	r2, [pc, #404]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	f043 0308 	orr.w	r3, r3, #8
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b63      	ldr	r3, [pc, #396]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	4960      	ldr	r1, [pc, #384]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c62:	4b5f      	ldr	r3, [pc, #380]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	495b      	ldr	r1, [pc, #364]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d109      	bne.n	8001c90 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 fcdd 	bl	8002640 <RCC_SetFlashLatencyFromMSIRange>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e343      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c90:	f000 fc4a 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b52      	ldr	r3, [pc, #328]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	091b      	lsrs	r3, r3, #4
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	4950      	ldr	r1, [pc, #320]	@ (8001de4 <HAL_RCC_OscConfig+0x274>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cac:	4a4e      	ldr	r2, [pc, #312]	@ (8001de8 <HAL_RCC_OscConfig+0x278>)
 8001cae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cb0:	4b4e      	ldr	r3, [pc, #312]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fdb5 	bl	8001824 <HAL_InitTick>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d052      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	e327      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d032      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cd0:	4b43      	ldr	r3, [pc, #268]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a42      	ldr	r2, [pc, #264]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fdf2 	bl	80018c4 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fdee 	bl	80018c4 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e310      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d02:	4b37      	ldr	r3, [pc, #220]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a36      	ldr	r2, [pc, #216]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d08:	f043 0308 	orr.w	r3, r3, #8
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b34      	ldr	r3, [pc, #208]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4931      	ldr	r1, [pc, #196]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d20:	4b2f      	ldr	r3, [pc, #188]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	492c      	ldr	r1, [pc, #176]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
 8001d34:	e01a      	b.n	8001d6c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d36:	4b2a      	ldr	r3, [pc, #168]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a29      	ldr	r2, [pc, #164]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d42:	f7ff fdbf 	bl	80018c4 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d4a:	f7ff fdbb 	bl	80018c4 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e2dd      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d5c:	4b20      	ldr	r3, [pc, #128]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f0      	bne.n	8001d4a <HAL_RCC_OscConfig+0x1da>
 8001d68:	e000      	b.n	8001d6c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d074      	beq.n	8001e62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d005      	beq.n	8001d8a <HAL_RCC_OscConfig+0x21a>
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	2b0c      	cmp	r3, #12
 8001d82:	d10e      	bne.n	8001da2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d10b      	bne.n	8001da2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8a:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d064      	beq.n	8001e60 <HAL_RCC_OscConfig+0x2f0>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d160      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e2ba      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x24a>
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0b      	ldr	r2, [pc, #44]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	e026      	b.n	8001e08 <HAL_RCC_OscConfig+0x298>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dc2:	d115      	bne.n	8001df0 <HAL_RCC_OscConfig+0x280>
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a05      	ldr	r2, [pc, #20]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001dca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b03      	ldr	r3, [pc, #12]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a02      	ldr	r2, [pc, #8]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	e014      	b.n	8001e08 <HAL_RCC_OscConfig+0x298>
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08003374 	.word	0x08003374
 8001de8:	20000004 	.word	0x20000004
 8001dec:	20000008 	.word	0x20000008
 8001df0:	4ba0      	ldr	r3, [pc, #640]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a9f      	ldr	r2, [pc, #636]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b9d      	ldr	r3, [pc, #628]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a9c      	ldr	r2, [pc, #624]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff fd58 	bl	80018c4 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff fd54 	bl	80018c4 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	@ 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e276      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2a:	4b92      	ldr	r3, [pc, #584]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x2a8>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff fd44 	bl	80018c4 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff fd40 	bl	80018c4 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	@ 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e262      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e52:	4b88      	ldr	r3, [pc, #544]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x2d0>
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d060      	beq.n	8001f30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_OscConfig+0x310>
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d119      	bne.n	8001eae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d116      	bne.n	8001eae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e80:	4b7c      	ldr	r3, [pc, #496]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_OscConfig+0x328>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e23f      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e98:	4b76      	ldr	r3, [pc, #472]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	061b      	lsls	r3, r3, #24
 8001ea6:	4973      	ldr	r1, [pc, #460]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eac:	e040      	b.n	8001f30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d023      	beq.n	8001efe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb6:	4b6f      	ldr	r3, [pc, #444]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a6e      	ldr	r2, [pc, #440]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fcff 	bl	80018c4 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eca:	f7ff fcfb 	bl	80018c4 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e21d      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001edc:	4b65      	ldr	r3, [pc, #404]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee8:	4b62      	ldr	r3, [pc, #392]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	061b      	lsls	r3, r3, #24
 8001ef6:	495f      	ldr	r1, [pc, #380]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
 8001efc:	e018      	b.n	8001f30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efe:	4b5d      	ldr	r3, [pc, #372]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a5c      	ldr	r2, [pc, #368]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7ff fcdb 	bl	80018c4 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f12:	f7ff fcd7 	bl	80018c4 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e1f9      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f24:	4b53      	ldr	r3, [pc, #332]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f0      	bne.n	8001f12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d03c      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01c      	beq.n	8001f7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f44:	4b4b      	ldr	r3, [pc, #300]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f4a:	4a4a      	ldr	r2, [pc, #296]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f54:	f7ff fcb6 	bl	80018c4 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5c:	f7ff fcb2 	bl	80018c4 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1d4      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f6e:	4b41      	ldr	r3, [pc, #260]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0ef      	beq.n	8001f5c <HAL_RCC_OscConfig+0x3ec>
 8001f7c:	e01b      	b.n	8001fb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f84:	4a3b      	ldr	r2, [pc, #236]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f86:	f023 0301 	bic.w	r3, r3, #1
 8001f8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fc99 	bl	80018c4 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f96:	f7ff fc95 	bl	80018c4 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e1b7      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa8:	4b32      	ldr	r3, [pc, #200]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1ef      	bne.n	8001f96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80a6 	beq.w	8002110 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10d      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd4:	4b27      	ldr	r3, [pc, #156]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd8:	4a26      	ldr	r2, [pc, #152]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fe0:	4b24      	ldr	r3, [pc, #144]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fec:	2301      	movs	r3, #1
 8001fee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff0:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <HAL_RCC_OscConfig+0x508>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d118      	bne.n	800202e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8002078 <HAL_RCC_OscConfig+0x508>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1d      	ldr	r2, [pc, #116]	@ (8002078 <HAL_RCC_OscConfig+0x508>)
 8002002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002006:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002008:	f7ff fc5c 	bl	80018c4 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002010:	f7ff fc58 	bl	80018c4 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e17a      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <HAL_RCC_OscConfig+0x508>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d108      	bne.n	8002048 <HAL_RCC_OscConfig+0x4d8>
 8002036:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203c:	4a0d      	ldr	r2, [pc, #52]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002046:	e029      	b.n	800209c <HAL_RCC_OscConfig+0x52c>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b05      	cmp	r3, #5
 800204e:	d115      	bne.n	800207c <HAL_RCC_OscConfig+0x50c>
 8002050:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002056:	4a07      	ldr	r2, [pc, #28]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002060:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002066:	4a03      	ldr	r2, [pc, #12]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002070:	e014      	b.n	800209c <HAL_RCC_OscConfig+0x52c>
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	40007000 	.word	0x40007000
 800207c:	4b9c      	ldr	r3, [pc, #624]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002082:	4a9b      	ldr	r2, [pc, #620]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800208c:	4b98      	ldr	r3, [pc, #608]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002092:	4a97      	ldr	r2, [pc, #604]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002094:	f023 0304 	bic.w	r3, r3, #4
 8002098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d016      	beq.n	80020d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a4:	f7ff fc0e 	bl	80018c4 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f7ff fc0a 	bl	80018c4 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e12a      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c2:	4b8b      	ldr	r3, [pc, #556]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0ed      	beq.n	80020ac <HAL_RCC_OscConfig+0x53c>
 80020d0:	e015      	b.n	80020fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d2:	f7ff fbf7 	bl	80018c4 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7ff fbf3 	bl	80018c4 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e113      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f0:	4b7f      	ldr	r3, [pc, #508]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1ed      	bne.n	80020da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020fe:	7ffb      	ldrb	r3, [r7, #31]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d105      	bne.n	8002110 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002104:	4b7a      	ldr	r3, [pc, #488]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002108:	4a79      	ldr	r2, [pc, #484]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 800210a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800210e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80fe 	beq.w	8002316 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211e:	2b02      	cmp	r3, #2
 8002120:	f040 80d0 	bne.w	80022c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002124:	4b72      	ldr	r3, [pc, #456]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f003 0203 	and.w	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002134:	429a      	cmp	r2, r3
 8002136:	d130      	bne.n	800219a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	3b01      	subs	r3, #1
 8002144:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002146:	429a      	cmp	r2, r3
 8002148:	d127      	bne.n	800219a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002154:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d11f      	bne.n	800219a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002164:	2a07      	cmp	r2, #7
 8002166:	bf14      	ite	ne
 8002168:	2201      	movne	r2, #1
 800216a:	2200      	moveq	r2, #0
 800216c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800216e:	4293      	cmp	r3, r2
 8002170:	d113      	bne.n	800219a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800217c:	085b      	lsrs	r3, r3, #1
 800217e:	3b01      	subs	r3, #1
 8002180:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d109      	bne.n	800219a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	3b01      	subs	r3, #1
 8002194:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d06e      	beq.n	8002278 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	2b0c      	cmp	r3, #12
 800219e:	d069      	beq.n	8002274 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021a0:	4b53      	ldr	r3, [pc, #332]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d105      	bne.n	80021b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021ac:	4b50      	ldr	r3, [pc, #320]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0ad      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021bc:	4b4c      	ldr	r3, [pc, #304]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a4b      	ldr	r2, [pc, #300]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 80021c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021c8:	f7ff fb7c 	bl	80018c4 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d0:	f7ff fb78 	bl	80018c4 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e09a      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e2:	4b43      	ldr	r3, [pc, #268]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ee:	4b40      	ldr	r3, [pc, #256]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	4b40      	ldr	r3, [pc, #256]	@ (80022f4 <HAL_RCC_OscConfig+0x784>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80021fe:	3a01      	subs	r2, #1
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	4311      	orrs	r1, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002208:	0212      	lsls	r2, r2, #8
 800220a:	4311      	orrs	r1, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002210:	0852      	lsrs	r2, r2, #1
 8002212:	3a01      	subs	r2, #1
 8002214:	0552      	lsls	r2, r2, #21
 8002216:	4311      	orrs	r1, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800221c:	0852      	lsrs	r2, r2, #1
 800221e:	3a01      	subs	r2, #1
 8002220:	0652      	lsls	r2, r2, #25
 8002222:	4311      	orrs	r1, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002228:	0912      	lsrs	r2, r2, #4
 800222a:	0452      	lsls	r2, r2, #17
 800222c:	430a      	orrs	r2, r1
 800222e:	4930      	ldr	r1, [pc, #192]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002230:	4313      	orrs	r3, r2
 8002232:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002234:	4b2e      	ldr	r3, [pc, #184]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a2d      	ldr	r2, [pc, #180]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 800223a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800223e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002240:	4b2b      	ldr	r3, [pc, #172]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4a2a      	ldr	r2, [pc, #168]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002246:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800224a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800224c:	f7ff fb3a 	bl	80018c4 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7ff fb36 	bl	80018c4 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e058      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002266:	4b22      	ldr	r3, [pc, #136]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002272:	e050      	b.n	8002316 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e04f      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002278:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d148      	bne.n	8002316 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002284:	4b1a      	ldr	r3, [pc, #104]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a19      	ldr	r2, [pc, #100]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 800228a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800228e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002290:	4b17      	ldr	r3, [pc, #92]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a16      	ldr	r2, [pc, #88]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002296:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800229a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800229c:	f7ff fb12 	bl	80018c4 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a4:	f7ff fb0e 	bl	80018c4 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e030      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b6:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x734>
 80022c2:	e028      	b.n	8002316 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2b0c      	cmp	r3, #12
 80022c8:	d023      	beq.n	8002312 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ca:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a08      	ldr	r2, [pc, #32]	@ (80022f0 <HAL_RCC_OscConfig+0x780>)
 80022d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7ff faf5 	bl	80018c4 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022dc:	e00c      	b.n	80022f8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7ff faf1 	bl	80018c4 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d905      	bls.n	80022f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e013      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
 80022f0:	40021000 	.word	0x40021000
 80022f4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f8:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <HAL_RCC_OscConfig+0x7b0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ec      	bne.n	80022de <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_RCC_OscConfig+0x7b0>)
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	4905      	ldr	r1, [pc, #20]	@ (8002320 <HAL_RCC_OscConfig+0x7b0>)
 800230a:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_RCC_OscConfig+0x7b4>)
 800230c:	4013      	ands	r3, r2
 800230e:	60cb      	str	r3, [r1, #12]
 8002310:	e001      	b.n	8002316 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	feeefffc 	.word	0xfeeefffc

08002328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0e7      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800233c:	4b75      	ldr	r3, [pc, #468]	@ (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d910      	bls.n	800236c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b72      	ldr	r3, [pc, #456]	@ (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 0207 	bic.w	r2, r3, #7
 8002352:	4970      	ldr	r1, [pc, #448]	@ (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b6e      	ldr	r3, [pc, #440]	@ (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0cf      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d010      	beq.n	800239a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	4b66      	ldr	r3, [pc, #408]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002384:	429a      	cmp	r2, r3
 8002386:	d908      	bls.n	800239a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002388:	4b63      	ldr	r3, [pc, #396]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4960      	ldr	r1, [pc, #384]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d04c      	beq.n	8002440 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d121      	bne.n	80023fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e0a6      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023c6:	4b54      	ldr	r3, [pc, #336]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d115      	bne.n	80023fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e09a      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023de:	4b4e      	ldr	r3, [pc, #312]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e08e      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e086      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023fe:	4b46      	ldr	r3, [pc, #280]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f023 0203 	bic.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4943      	ldr	r1, [pc, #268]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002410:	f7ff fa58 	bl	80018c4 <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	e00a      	b.n	800242e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002418:	f7ff fa54 	bl	80018c4 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e06e      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	4b3a      	ldr	r3, [pc, #232]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 020c 	and.w	r2, r3, #12
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	429a      	cmp	r2, r3
 800243e:	d1eb      	bne.n	8002418 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d010      	beq.n	800246e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	4b31      	ldr	r3, [pc, #196]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002458:	429a      	cmp	r2, r3
 800245a:	d208      	bcs.n	800246e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245c:	4b2e      	ldr	r3, [pc, #184]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	492b      	ldr	r1, [pc, #172]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800246e:	4b29      	ldr	r3, [pc, #164]	@ (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d210      	bcs.n	800249e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247c:	4b25      	ldr	r3, [pc, #148]	@ (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 0207 	bic.w	r2, r3, #7
 8002484:	4923      	ldr	r1, [pc, #140]	@ (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	4313      	orrs	r3, r2
 800248a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248c:	4b21      	ldr	r3, [pc, #132]	@ (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d001      	beq.n	800249e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e036      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	4918      	ldr	r1, [pc, #96]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d009      	beq.n	80024dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c8:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4910      	ldr	r1, [pc, #64]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024dc:	f000 f824 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	490b      	ldr	r1, [pc, #44]	@ (800251c <HAL_RCC_ClockConfig+0x1f4>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
 80024f8:	4a09      	ldr	r2, [pc, #36]	@ (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 80024fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024fc:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <HAL_RCC_ClockConfig+0x1fc>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff f98f 	bl	8001824 <HAL_InitTick>
 8002506:	4603      	mov	r3, r0
 8002508:	72fb      	strb	r3, [r7, #11]

  return status;
 800250a:	7afb      	ldrb	r3, [r7, #11]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40022000 	.word	0x40022000
 8002518:	40021000 	.word	0x40021000
 800251c:	08003374 	.word	0x08003374
 8002520:	20000004 	.word	0x20000004
 8002524:	20000008 	.word	0x20000008

08002528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	@ 0x24
 800252c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002536:	4b3e      	ldr	r3, [pc, #248]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002540:	4b3b      	ldr	r3, [pc, #236]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x34>
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2b0c      	cmp	r3, #12
 8002554:	d121      	bne.n	800259a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d11e      	bne.n	800259a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800255c:	4b34      	ldr	r3, [pc, #208]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d107      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002568:	4b31      	ldr	r3, [pc, #196]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 800256a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	e005      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002578:	4b2d      	ldr	r3, [pc, #180]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002584:	4a2b      	ldr	r2, [pc, #172]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10d      	bne.n	80025b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002598:	e00a      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b04      	cmp	r3, #4
 800259e:	d102      	bne.n	80025a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025a0:	4b25      	ldr	r3, [pc, #148]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x110>)
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	e004      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025ac:	4b23      	ldr	r3, [pc, #140]	@ (800263c <HAL_RCC_GetSysClockFreq+0x114>)
 80025ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	2b0c      	cmp	r3, #12
 80025b4:	d134      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d003      	beq.n	80025ce <HAL_RCC_GetSysClockFreq+0xa6>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d003      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0xac>
 80025cc:	e005      	b.n	80025da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x110>)
 80025d0:	617b      	str	r3, [r7, #20]
      break;
 80025d2:	e005      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025d4:	4b19      	ldr	r3, [pc, #100]	@ (800263c <HAL_RCC_GetSysClockFreq+0x114>)
 80025d6:	617b      	str	r3, [r7, #20]
      break;
 80025d8:	e002      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	617b      	str	r3, [r7, #20]
      break;
 80025de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025e0:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	3301      	adds	r3, #1
 80025ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025ee:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	fb03 f202 	mul.w	r2, r3, r2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	fbb2 f3f3 	udiv	r3, r2, r3
 8002604:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002606:	4b0a      	ldr	r3, [pc, #40]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	0e5b      	lsrs	r3, r3, #25
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	3301      	adds	r3, #1
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	fbb2 f3f3 	udiv	r3, r2, r3
 800261e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002620:	69bb      	ldr	r3, [r7, #24]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3724      	adds	r7, #36	@ 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	08003384 	.word	0x08003384
 8002638:	00f42400 	.word	0x00f42400
 800263c:	007a1200 	.word	0x007a1200

08002640 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800264c:	4b2a      	ldr	r3, [pc, #168]	@ (80026f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002658:	f7ff fa26 	bl	8001aa8 <HAL_PWREx_GetVoltageRange>
 800265c:	6178      	str	r0, [r7, #20]
 800265e:	e014      	b.n	800268a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002660:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002664:	4a24      	ldr	r2, [pc, #144]	@ (80026f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800266a:	6593      	str	r3, [r2, #88]	@ 0x58
 800266c:	4b22      	ldr	r3, [pc, #136]	@ (80026f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800266e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002678:	f7ff fa16 	bl	8001aa8 <HAL_PWREx_GetVoltageRange>
 800267c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800267e:	4b1e      	ldr	r3, [pc, #120]	@ (80026f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	4a1d      	ldr	r2, [pc, #116]	@ (80026f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002688:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002690:	d10b      	bne.n	80026aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b80      	cmp	r3, #128	@ 0x80
 8002696:	d919      	bls.n	80026cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2ba0      	cmp	r3, #160	@ 0xa0
 800269c:	d902      	bls.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800269e:	2302      	movs	r3, #2
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	e013      	b.n	80026cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026a4:	2301      	movs	r3, #1
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	e010      	b.n	80026cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b80      	cmp	r3, #128	@ 0x80
 80026ae:	d902      	bls.n	80026b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026b0:	2303      	movs	r3, #3
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	e00a      	b.n	80026cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b80      	cmp	r3, #128	@ 0x80
 80026ba:	d102      	bne.n	80026c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026bc:	2302      	movs	r3, #2
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	e004      	b.n	80026cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b70      	cmp	r3, #112	@ 0x70
 80026c6:	d101      	bne.n	80026cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026c8:	2301      	movs	r3, #1
 80026ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026cc:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f023 0207 	bic.w	r2, r3, #7
 80026d4:	4909      	ldr	r1, [pc, #36]	@ (80026fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026dc:	4b07      	ldr	r3, [pc, #28]	@ (80026fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d001      	beq.n	80026ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40022000 	.word	0x40022000

08002700 <siprintf>:
 8002700:	b40e      	push	{r1, r2, r3}
 8002702:	b500      	push	{lr}
 8002704:	b09c      	sub	sp, #112	@ 0x70
 8002706:	ab1d      	add	r3, sp, #116	@ 0x74
 8002708:	9002      	str	r0, [sp, #8]
 800270a:	9006      	str	r0, [sp, #24]
 800270c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002710:	4809      	ldr	r0, [pc, #36]	@ (8002738 <siprintf+0x38>)
 8002712:	9107      	str	r1, [sp, #28]
 8002714:	9104      	str	r1, [sp, #16]
 8002716:	4909      	ldr	r1, [pc, #36]	@ (800273c <siprintf+0x3c>)
 8002718:	f853 2b04 	ldr.w	r2, [r3], #4
 800271c:	9105      	str	r1, [sp, #20]
 800271e:	6800      	ldr	r0, [r0, #0]
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	a902      	add	r1, sp, #8
 8002724:	f000 f89c 	bl	8002860 <_svfiprintf_r>
 8002728:	9b02      	ldr	r3, [sp, #8]
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	b01c      	add	sp, #112	@ 0x70
 8002730:	f85d eb04 	ldr.w	lr, [sp], #4
 8002734:	b003      	add	sp, #12
 8002736:	4770      	bx	lr
 8002738:	20000010 	.word	0x20000010
 800273c:	ffff0208 	.word	0xffff0208

08002740 <memset>:
 8002740:	4402      	add	r2, r0
 8002742:	4603      	mov	r3, r0
 8002744:	4293      	cmp	r3, r2
 8002746:	d100      	bne.n	800274a <memset+0xa>
 8002748:	4770      	bx	lr
 800274a:	f803 1b01 	strb.w	r1, [r3], #1
 800274e:	e7f9      	b.n	8002744 <memset+0x4>

08002750 <__errno>:
 8002750:	4b01      	ldr	r3, [pc, #4]	@ (8002758 <__errno+0x8>)
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000010 	.word	0x20000010

0800275c <__libc_init_array>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	4d0d      	ldr	r5, [pc, #52]	@ (8002794 <__libc_init_array+0x38>)
 8002760:	4c0d      	ldr	r4, [pc, #52]	@ (8002798 <__libc_init_array+0x3c>)
 8002762:	1b64      	subs	r4, r4, r5
 8002764:	10a4      	asrs	r4, r4, #2
 8002766:	2600      	movs	r6, #0
 8002768:	42a6      	cmp	r6, r4
 800276a:	d109      	bne.n	8002780 <__libc_init_array+0x24>
 800276c:	4d0b      	ldr	r5, [pc, #44]	@ (800279c <__libc_init_array+0x40>)
 800276e:	4c0c      	ldr	r4, [pc, #48]	@ (80027a0 <__libc_init_array+0x44>)
 8002770:	f000 fd6c 	bl	800324c <_init>
 8002774:	1b64      	subs	r4, r4, r5
 8002776:	10a4      	asrs	r4, r4, #2
 8002778:	2600      	movs	r6, #0
 800277a:	42a6      	cmp	r6, r4
 800277c:	d105      	bne.n	800278a <__libc_init_array+0x2e>
 800277e:	bd70      	pop	{r4, r5, r6, pc}
 8002780:	f855 3b04 	ldr.w	r3, [r5], #4
 8002784:	4798      	blx	r3
 8002786:	3601      	adds	r6, #1
 8002788:	e7ee      	b.n	8002768 <__libc_init_array+0xc>
 800278a:	f855 3b04 	ldr.w	r3, [r5], #4
 800278e:	4798      	blx	r3
 8002790:	3601      	adds	r6, #1
 8002792:	e7f2      	b.n	800277a <__libc_init_array+0x1e>
 8002794:	080033f0 	.word	0x080033f0
 8002798:	080033f0 	.word	0x080033f0
 800279c:	080033f0 	.word	0x080033f0
 80027a0:	080033f4 	.word	0x080033f4

080027a4 <__retarget_lock_acquire_recursive>:
 80027a4:	4770      	bx	lr

080027a6 <__retarget_lock_release_recursive>:
 80027a6:	4770      	bx	lr

080027a8 <__ssputs_r>:
 80027a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027ac:	688e      	ldr	r6, [r1, #8]
 80027ae:	461f      	mov	r7, r3
 80027b0:	42be      	cmp	r6, r7
 80027b2:	680b      	ldr	r3, [r1, #0]
 80027b4:	4682      	mov	sl, r0
 80027b6:	460c      	mov	r4, r1
 80027b8:	4690      	mov	r8, r2
 80027ba:	d82d      	bhi.n	8002818 <__ssputs_r+0x70>
 80027bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80027c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80027c4:	d026      	beq.n	8002814 <__ssputs_r+0x6c>
 80027c6:	6965      	ldr	r5, [r4, #20]
 80027c8:	6909      	ldr	r1, [r1, #16]
 80027ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027ce:	eba3 0901 	sub.w	r9, r3, r1
 80027d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80027d6:	1c7b      	adds	r3, r7, #1
 80027d8:	444b      	add	r3, r9
 80027da:	106d      	asrs	r5, r5, #1
 80027dc:	429d      	cmp	r5, r3
 80027de:	bf38      	it	cc
 80027e0:	461d      	movcc	r5, r3
 80027e2:	0553      	lsls	r3, r2, #21
 80027e4:	d527      	bpl.n	8002836 <__ssputs_r+0x8e>
 80027e6:	4629      	mov	r1, r5
 80027e8:	f000 f958 	bl	8002a9c <_malloc_r>
 80027ec:	4606      	mov	r6, r0
 80027ee:	b360      	cbz	r0, 800284a <__ssputs_r+0xa2>
 80027f0:	6921      	ldr	r1, [r4, #16]
 80027f2:	464a      	mov	r2, r9
 80027f4:	f000 fbc4 	bl	8002f80 <memcpy>
 80027f8:	89a3      	ldrh	r3, [r4, #12]
 80027fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80027fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002802:	81a3      	strh	r3, [r4, #12]
 8002804:	6126      	str	r6, [r4, #16]
 8002806:	6165      	str	r5, [r4, #20]
 8002808:	444e      	add	r6, r9
 800280a:	eba5 0509 	sub.w	r5, r5, r9
 800280e:	6026      	str	r6, [r4, #0]
 8002810:	60a5      	str	r5, [r4, #8]
 8002812:	463e      	mov	r6, r7
 8002814:	42be      	cmp	r6, r7
 8002816:	d900      	bls.n	800281a <__ssputs_r+0x72>
 8002818:	463e      	mov	r6, r7
 800281a:	6820      	ldr	r0, [r4, #0]
 800281c:	4632      	mov	r2, r6
 800281e:	4641      	mov	r1, r8
 8002820:	f000 fb84 	bl	8002f2c <memmove>
 8002824:	68a3      	ldr	r3, [r4, #8]
 8002826:	1b9b      	subs	r3, r3, r6
 8002828:	60a3      	str	r3, [r4, #8]
 800282a:	6823      	ldr	r3, [r4, #0]
 800282c:	4433      	add	r3, r6
 800282e:	6023      	str	r3, [r4, #0]
 8002830:	2000      	movs	r0, #0
 8002832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002836:	462a      	mov	r2, r5
 8002838:	f000 fb4a 	bl	8002ed0 <_realloc_r>
 800283c:	4606      	mov	r6, r0
 800283e:	2800      	cmp	r0, #0
 8002840:	d1e0      	bne.n	8002804 <__ssputs_r+0x5c>
 8002842:	6921      	ldr	r1, [r4, #16]
 8002844:	4650      	mov	r0, sl
 8002846:	f000 fba9 	bl	8002f9c <_free_r>
 800284a:	230c      	movs	r3, #12
 800284c:	f8ca 3000 	str.w	r3, [sl]
 8002850:	89a3      	ldrh	r3, [r4, #12]
 8002852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002856:	81a3      	strh	r3, [r4, #12]
 8002858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800285c:	e7e9      	b.n	8002832 <__ssputs_r+0x8a>
	...

08002860 <_svfiprintf_r>:
 8002860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002864:	4698      	mov	r8, r3
 8002866:	898b      	ldrh	r3, [r1, #12]
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	b09d      	sub	sp, #116	@ 0x74
 800286c:	4607      	mov	r7, r0
 800286e:	460d      	mov	r5, r1
 8002870:	4614      	mov	r4, r2
 8002872:	d510      	bpl.n	8002896 <_svfiprintf_r+0x36>
 8002874:	690b      	ldr	r3, [r1, #16]
 8002876:	b973      	cbnz	r3, 8002896 <_svfiprintf_r+0x36>
 8002878:	2140      	movs	r1, #64	@ 0x40
 800287a:	f000 f90f 	bl	8002a9c <_malloc_r>
 800287e:	6028      	str	r0, [r5, #0]
 8002880:	6128      	str	r0, [r5, #16]
 8002882:	b930      	cbnz	r0, 8002892 <_svfiprintf_r+0x32>
 8002884:	230c      	movs	r3, #12
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800288c:	b01d      	add	sp, #116	@ 0x74
 800288e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002892:	2340      	movs	r3, #64	@ 0x40
 8002894:	616b      	str	r3, [r5, #20]
 8002896:	2300      	movs	r3, #0
 8002898:	9309      	str	r3, [sp, #36]	@ 0x24
 800289a:	2320      	movs	r3, #32
 800289c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80028a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80028a4:	2330      	movs	r3, #48	@ 0x30
 80028a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002a44 <_svfiprintf_r+0x1e4>
 80028aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80028ae:	f04f 0901 	mov.w	r9, #1
 80028b2:	4623      	mov	r3, r4
 80028b4:	469a      	mov	sl, r3
 80028b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028ba:	b10a      	cbz	r2, 80028c0 <_svfiprintf_r+0x60>
 80028bc:	2a25      	cmp	r2, #37	@ 0x25
 80028be:	d1f9      	bne.n	80028b4 <_svfiprintf_r+0x54>
 80028c0:	ebba 0b04 	subs.w	fp, sl, r4
 80028c4:	d00b      	beq.n	80028de <_svfiprintf_r+0x7e>
 80028c6:	465b      	mov	r3, fp
 80028c8:	4622      	mov	r2, r4
 80028ca:	4629      	mov	r1, r5
 80028cc:	4638      	mov	r0, r7
 80028ce:	f7ff ff6b 	bl	80027a8 <__ssputs_r>
 80028d2:	3001      	adds	r0, #1
 80028d4:	f000 80a7 	beq.w	8002a26 <_svfiprintf_r+0x1c6>
 80028d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80028da:	445a      	add	r2, fp
 80028dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80028de:	f89a 3000 	ldrb.w	r3, [sl]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 809f 	beq.w	8002a26 <_svfiprintf_r+0x1c6>
 80028e8:	2300      	movs	r3, #0
 80028ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028f2:	f10a 0a01 	add.w	sl, sl, #1
 80028f6:	9304      	str	r3, [sp, #16]
 80028f8:	9307      	str	r3, [sp, #28]
 80028fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80028fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8002900:	4654      	mov	r4, sl
 8002902:	2205      	movs	r2, #5
 8002904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002908:	484e      	ldr	r0, [pc, #312]	@ (8002a44 <_svfiprintf_r+0x1e4>)
 800290a:	f7fd fc61 	bl	80001d0 <memchr>
 800290e:	9a04      	ldr	r2, [sp, #16]
 8002910:	b9d8      	cbnz	r0, 800294a <_svfiprintf_r+0xea>
 8002912:	06d0      	lsls	r0, r2, #27
 8002914:	bf44      	itt	mi
 8002916:	2320      	movmi	r3, #32
 8002918:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800291c:	0711      	lsls	r1, r2, #28
 800291e:	bf44      	itt	mi
 8002920:	232b      	movmi	r3, #43	@ 0x2b
 8002922:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002926:	f89a 3000 	ldrb.w	r3, [sl]
 800292a:	2b2a      	cmp	r3, #42	@ 0x2a
 800292c:	d015      	beq.n	800295a <_svfiprintf_r+0xfa>
 800292e:	9a07      	ldr	r2, [sp, #28]
 8002930:	4654      	mov	r4, sl
 8002932:	2000      	movs	r0, #0
 8002934:	f04f 0c0a 	mov.w	ip, #10
 8002938:	4621      	mov	r1, r4
 800293a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800293e:	3b30      	subs	r3, #48	@ 0x30
 8002940:	2b09      	cmp	r3, #9
 8002942:	d94b      	bls.n	80029dc <_svfiprintf_r+0x17c>
 8002944:	b1b0      	cbz	r0, 8002974 <_svfiprintf_r+0x114>
 8002946:	9207      	str	r2, [sp, #28]
 8002948:	e014      	b.n	8002974 <_svfiprintf_r+0x114>
 800294a:	eba0 0308 	sub.w	r3, r0, r8
 800294e:	fa09 f303 	lsl.w	r3, r9, r3
 8002952:	4313      	orrs	r3, r2
 8002954:	9304      	str	r3, [sp, #16]
 8002956:	46a2      	mov	sl, r4
 8002958:	e7d2      	b.n	8002900 <_svfiprintf_r+0xa0>
 800295a:	9b03      	ldr	r3, [sp, #12]
 800295c:	1d19      	adds	r1, r3, #4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	9103      	str	r1, [sp, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	bfbb      	ittet	lt
 8002966:	425b      	neglt	r3, r3
 8002968:	f042 0202 	orrlt.w	r2, r2, #2
 800296c:	9307      	strge	r3, [sp, #28]
 800296e:	9307      	strlt	r3, [sp, #28]
 8002970:	bfb8      	it	lt
 8002972:	9204      	strlt	r2, [sp, #16]
 8002974:	7823      	ldrb	r3, [r4, #0]
 8002976:	2b2e      	cmp	r3, #46	@ 0x2e
 8002978:	d10a      	bne.n	8002990 <_svfiprintf_r+0x130>
 800297a:	7863      	ldrb	r3, [r4, #1]
 800297c:	2b2a      	cmp	r3, #42	@ 0x2a
 800297e:	d132      	bne.n	80029e6 <_svfiprintf_r+0x186>
 8002980:	9b03      	ldr	r3, [sp, #12]
 8002982:	1d1a      	adds	r2, r3, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	9203      	str	r2, [sp, #12]
 8002988:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800298c:	3402      	adds	r4, #2
 800298e:	9305      	str	r3, [sp, #20]
 8002990:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002a54 <_svfiprintf_r+0x1f4>
 8002994:	7821      	ldrb	r1, [r4, #0]
 8002996:	2203      	movs	r2, #3
 8002998:	4650      	mov	r0, sl
 800299a:	f7fd fc19 	bl	80001d0 <memchr>
 800299e:	b138      	cbz	r0, 80029b0 <_svfiprintf_r+0x150>
 80029a0:	9b04      	ldr	r3, [sp, #16]
 80029a2:	eba0 000a 	sub.w	r0, r0, sl
 80029a6:	2240      	movs	r2, #64	@ 0x40
 80029a8:	4082      	lsls	r2, r0
 80029aa:	4313      	orrs	r3, r2
 80029ac:	3401      	adds	r4, #1
 80029ae:	9304      	str	r3, [sp, #16]
 80029b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029b4:	4824      	ldr	r0, [pc, #144]	@ (8002a48 <_svfiprintf_r+0x1e8>)
 80029b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80029ba:	2206      	movs	r2, #6
 80029bc:	f7fd fc08 	bl	80001d0 <memchr>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	d036      	beq.n	8002a32 <_svfiprintf_r+0x1d2>
 80029c4:	4b21      	ldr	r3, [pc, #132]	@ (8002a4c <_svfiprintf_r+0x1ec>)
 80029c6:	bb1b      	cbnz	r3, 8002a10 <_svfiprintf_r+0x1b0>
 80029c8:	9b03      	ldr	r3, [sp, #12]
 80029ca:	3307      	adds	r3, #7
 80029cc:	f023 0307 	bic.w	r3, r3, #7
 80029d0:	3308      	adds	r3, #8
 80029d2:	9303      	str	r3, [sp, #12]
 80029d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80029d6:	4433      	add	r3, r6
 80029d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80029da:	e76a      	b.n	80028b2 <_svfiprintf_r+0x52>
 80029dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80029e0:	460c      	mov	r4, r1
 80029e2:	2001      	movs	r0, #1
 80029e4:	e7a8      	b.n	8002938 <_svfiprintf_r+0xd8>
 80029e6:	2300      	movs	r3, #0
 80029e8:	3401      	adds	r4, #1
 80029ea:	9305      	str	r3, [sp, #20]
 80029ec:	4619      	mov	r1, r3
 80029ee:	f04f 0c0a 	mov.w	ip, #10
 80029f2:	4620      	mov	r0, r4
 80029f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029f8:	3a30      	subs	r2, #48	@ 0x30
 80029fa:	2a09      	cmp	r2, #9
 80029fc:	d903      	bls.n	8002a06 <_svfiprintf_r+0x1a6>
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0c6      	beq.n	8002990 <_svfiprintf_r+0x130>
 8002a02:	9105      	str	r1, [sp, #20]
 8002a04:	e7c4      	b.n	8002990 <_svfiprintf_r+0x130>
 8002a06:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e7f0      	b.n	80029f2 <_svfiprintf_r+0x192>
 8002a10:	ab03      	add	r3, sp, #12
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	462a      	mov	r2, r5
 8002a16:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <_svfiprintf_r+0x1f0>)
 8002a18:	a904      	add	r1, sp, #16
 8002a1a:	4638      	mov	r0, r7
 8002a1c:	f3af 8000 	nop.w
 8002a20:	1c42      	adds	r2, r0, #1
 8002a22:	4606      	mov	r6, r0
 8002a24:	d1d6      	bne.n	80029d4 <_svfiprintf_r+0x174>
 8002a26:	89ab      	ldrh	r3, [r5, #12]
 8002a28:	065b      	lsls	r3, r3, #25
 8002a2a:	f53f af2d 	bmi.w	8002888 <_svfiprintf_r+0x28>
 8002a2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002a30:	e72c      	b.n	800288c <_svfiprintf_r+0x2c>
 8002a32:	ab03      	add	r3, sp, #12
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	462a      	mov	r2, r5
 8002a38:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <_svfiprintf_r+0x1f0>)
 8002a3a:	a904      	add	r1, sp, #16
 8002a3c:	4638      	mov	r0, r7
 8002a3e:	f000 f91b 	bl	8002c78 <_printf_i>
 8002a42:	e7ed      	b.n	8002a20 <_svfiprintf_r+0x1c0>
 8002a44:	080033b4 	.word	0x080033b4
 8002a48:	080033be 	.word	0x080033be
 8002a4c:	00000000 	.word	0x00000000
 8002a50:	080027a9 	.word	0x080027a9
 8002a54:	080033ba 	.word	0x080033ba

08002a58 <sbrk_aligned>:
 8002a58:	b570      	push	{r4, r5, r6, lr}
 8002a5a:	4e0f      	ldr	r6, [pc, #60]	@ (8002a98 <sbrk_aligned+0x40>)
 8002a5c:	460c      	mov	r4, r1
 8002a5e:	6831      	ldr	r1, [r6, #0]
 8002a60:	4605      	mov	r5, r0
 8002a62:	b911      	cbnz	r1, 8002a6a <sbrk_aligned+0x12>
 8002a64:	f000 fa7c 	bl	8002f60 <_sbrk_r>
 8002a68:	6030      	str	r0, [r6, #0]
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	4628      	mov	r0, r5
 8002a6e:	f000 fa77 	bl	8002f60 <_sbrk_r>
 8002a72:	1c43      	adds	r3, r0, #1
 8002a74:	d103      	bne.n	8002a7e <sbrk_aligned+0x26>
 8002a76:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	bd70      	pop	{r4, r5, r6, pc}
 8002a7e:	1cc4      	adds	r4, r0, #3
 8002a80:	f024 0403 	bic.w	r4, r4, #3
 8002a84:	42a0      	cmp	r0, r4
 8002a86:	d0f8      	beq.n	8002a7a <sbrk_aligned+0x22>
 8002a88:	1a21      	subs	r1, r4, r0
 8002a8a:	4628      	mov	r0, r5
 8002a8c:	f000 fa68 	bl	8002f60 <_sbrk_r>
 8002a90:	3001      	adds	r0, #1
 8002a92:	d1f2      	bne.n	8002a7a <sbrk_aligned+0x22>
 8002a94:	e7ef      	b.n	8002a76 <sbrk_aligned+0x1e>
 8002a96:	bf00      	nop
 8002a98:	2000118c 	.word	0x2000118c

08002a9c <_malloc_r>:
 8002a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002aa0:	1ccd      	adds	r5, r1, #3
 8002aa2:	f025 0503 	bic.w	r5, r5, #3
 8002aa6:	3508      	adds	r5, #8
 8002aa8:	2d0c      	cmp	r5, #12
 8002aaa:	bf38      	it	cc
 8002aac:	250c      	movcc	r5, #12
 8002aae:	2d00      	cmp	r5, #0
 8002ab0:	4606      	mov	r6, r0
 8002ab2:	db01      	blt.n	8002ab8 <_malloc_r+0x1c>
 8002ab4:	42a9      	cmp	r1, r5
 8002ab6:	d904      	bls.n	8002ac2 <_malloc_r+0x26>
 8002ab8:	230c      	movs	r3, #12
 8002aba:	6033      	str	r3, [r6, #0]
 8002abc:	2000      	movs	r0, #0
 8002abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ac2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002b98 <_malloc_r+0xfc>
 8002ac6:	f000 f9f7 	bl	8002eb8 <__malloc_lock>
 8002aca:	f8d8 3000 	ldr.w	r3, [r8]
 8002ace:	461c      	mov	r4, r3
 8002ad0:	bb44      	cbnz	r4, 8002b24 <_malloc_r+0x88>
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	4630      	mov	r0, r6
 8002ad6:	f7ff ffbf 	bl	8002a58 <sbrk_aligned>
 8002ada:	1c43      	adds	r3, r0, #1
 8002adc:	4604      	mov	r4, r0
 8002ade:	d158      	bne.n	8002b92 <_malloc_r+0xf6>
 8002ae0:	f8d8 4000 	ldr.w	r4, [r8]
 8002ae4:	4627      	mov	r7, r4
 8002ae6:	2f00      	cmp	r7, #0
 8002ae8:	d143      	bne.n	8002b72 <_malloc_r+0xd6>
 8002aea:	2c00      	cmp	r4, #0
 8002aec:	d04b      	beq.n	8002b86 <_malloc_r+0xea>
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	4639      	mov	r1, r7
 8002af2:	4630      	mov	r0, r6
 8002af4:	eb04 0903 	add.w	r9, r4, r3
 8002af8:	f000 fa32 	bl	8002f60 <_sbrk_r>
 8002afc:	4581      	cmp	r9, r0
 8002afe:	d142      	bne.n	8002b86 <_malloc_r+0xea>
 8002b00:	6821      	ldr	r1, [r4, #0]
 8002b02:	1a6d      	subs	r5, r5, r1
 8002b04:	4629      	mov	r1, r5
 8002b06:	4630      	mov	r0, r6
 8002b08:	f7ff ffa6 	bl	8002a58 <sbrk_aligned>
 8002b0c:	3001      	adds	r0, #1
 8002b0e:	d03a      	beq.n	8002b86 <_malloc_r+0xea>
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	442b      	add	r3, r5
 8002b14:	6023      	str	r3, [r4, #0]
 8002b16:	f8d8 3000 	ldr.w	r3, [r8]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	bb62      	cbnz	r2, 8002b78 <_malloc_r+0xdc>
 8002b1e:	f8c8 7000 	str.w	r7, [r8]
 8002b22:	e00f      	b.n	8002b44 <_malloc_r+0xa8>
 8002b24:	6822      	ldr	r2, [r4, #0]
 8002b26:	1b52      	subs	r2, r2, r5
 8002b28:	d420      	bmi.n	8002b6c <_malloc_r+0xd0>
 8002b2a:	2a0b      	cmp	r2, #11
 8002b2c:	d917      	bls.n	8002b5e <_malloc_r+0xc2>
 8002b2e:	1961      	adds	r1, r4, r5
 8002b30:	42a3      	cmp	r3, r4
 8002b32:	6025      	str	r5, [r4, #0]
 8002b34:	bf18      	it	ne
 8002b36:	6059      	strne	r1, [r3, #4]
 8002b38:	6863      	ldr	r3, [r4, #4]
 8002b3a:	bf08      	it	eq
 8002b3c:	f8c8 1000 	streq.w	r1, [r8]
 8002b40:	5162      	str	r2, [r4, r5]
 8002b42:	604b      	str	r3, [r1, #4]
 8002b44:	4630      	mov	r0, r6
 8002b46:	f000 f9bd 	bl	8002ec4 <__malloc_unlock>
 8002b4a:	f104 000b 	add.w	r0, r4, #11
 8002b4e:	1d23      	adds	r3, r4, #4
 8002b50:	f020 0007 	bic.w	r0, r0, #7
 8002b54:	1ac2      	subs	r2, r0, r3
 8002b56:	bf1c      	itt	ne
 8002b58:	1a1b      	subne	r3, r3, r0
 8002b5a:	50a3      	strne	r3, [r4, r2]
 8002b5c:	e7af      	b.n	8002abe <_malloc_r+0x22>
 8002b5e:	6862      	ldr	r2, [r4, #4]
 8002b60:	42a3      	cmp	r3, r4
 8002b62:	bf0c      	ite	eq
 8002b64:	f8c8 2000 	streq.w	r2, [r8]
 8002b68:	605a      	strne	r2, [r3, #4]
 8002b6a:	e7eb      	b.n	8002b44 <_malloc_r+0xa8>
 8002b6c:	4623      	mov	r3, r4
 8002b6e:	6864      	ldr	r4, [r4, #4]
 8002b70:	e7ae      	b.n	8002ad0 <_malloc_r+0x34>
 8002b72:	463c      	mov	r4, r7
 8002b74:	687f      	ldr	r7, [r7, #4]
 8002b76:	e7b6      	b.n	8002ae6 <_malloc_r+0x4a>
 8002b78:	461a      	mov	r2, r3
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	42a3      	cmp	r3, r4
 8002b7e:	d1fb      	bne.n	8002b78 <_malloc_r+0xdc>
 8002b80:	2300      	movs	r3, #0
 8002b82:	6053      	str	r3, [r2, #4]
 8002b84:	e7de      	b.n	8002b44 <_malloc_r+0xa8>
 8002b86:	230c      	movs	r3, #12
 8002b88:	6033      	str	r3, [r6, #0]
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	f000 f99a 	bl	8002ec4 <__malloc_unlock>
 8002b90:	e794      	b.n	8002abc <_malloc_r+0x20>
 8002b92:	6005      	str	r5, [r0, #0]
 8002b94:	e7d6      	b.n	8002b44 <_malloc_r+0xa8>
 8002b96:	bf00      	nop
 8002b98:	20001190 	.word	0x20001190

08002b9c <_printf_common>:
 8002b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ba0:	4616      	mov	r6, r2
 8002ba2:	4698      	mov	r8, r3
 8002ba4:	688a      	ldr	r2, [r1, #8]
 8002ba6:	690b      	ldr	r3, [r1, #16]
 8002ba8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002bac:	4293      	cmp	r3, r2
 8002bae:	bfb8      	it	lt
 8002bb0:	4613      	movlt	r3, r2
 8002bb2:	6033      	str	r3, [r6, #0]
 8002bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002bb8:	4607      	mov	r7, r0
 8002bba:	460c      	mov	r4, r1
 8002bbc:	b10a      	cbz	r2, 8002bc2 <_printf_common+0x26>
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	6033      	str	r3, [r6, #0]
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	0699      	lsls	r1, r3, #26
 8002bc6:	bf42      	ittt	mi
 8002bc8:	6833      	ldrmi	r3, [r6, #0]
 8002bca:	3302      	addmi	r3, #2
 8002bcc:	6033      	strmi	r3, [r6, #0]
 8002bce:	6825      	ldr	r5, [r4, #0]
 8002bd0:	f015 0506 	ands.w	r5, r5, #6
 8002bd4:	d106      	bne.n	8002be4 <_printf_common+0x48>
 8002bd6:	f104 0a19 	add.w	sl, r4, #25
 8002bda:	68e3      	ldr	r3, [r4, #12]
 8002bdc:	6832      	ldr	r2, [r6, #0]
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	42ab      	cmp	r3, r5
 8002be2:	dc26      	bgt.n	8002c32 <_printf_common+0x96>
 8002be4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002be8:	6822      	ldr	r2, [r4, #0]
 8002bea:	3b00      	subs	r3, #0
 8002bec:	bf18      	it	ne
 8002bee:	2301      	movne	r3, #1
 8002bf0:	0692      	lsls	r2, r2, #26
 8002bf2:	d42b      	bmi.n	8002c4c <_printf_common+0xb0>
 8002bf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4638      	mov	r0, r7
 8002bfc:	47c8      	blx	r9
 8002bfe:	3001      	adds	r0, #1
 8002c00:	d01e      	beq.n	8002c40 <_printf_common+0xa4>
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	6922      	ldr	r2, [r4, #16]
 8002c06:	f003 0306 	and.w	r3, r3, #6
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	bf02      	ittt	eq
 8002c0e:	68e5      	ldreq	r5, [r4, #12]
 8002c10:	6833      	ldreq	r3, [r6, #0]
 8002c12:	1aed      	subeq	r5, r5, r3
 8002c14:	68a3      	ldr	r3, [r4, #8]
 8002c16:	bf0c      	ite	eq
 8002c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c1c:	2500      	movne	r5, #0
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	bfc4      	itt	gt
 8002c22:	1a9b      	subgt	r3, r3, r2
 8002c24:	18ed      	addgt	r5, r5, r3
 8002c26:	2600      	movs	r6, #0
 8002c28:	341a      	adds	r4, #26
 8002c2a:	42b5      	cmp	r5, r6
 8002c2c:	d11a      	bne.n	8002c64 <_printf_common+0xc8>
 8002c2e:	2000      	movs	r0, #0
 8002c30:	e008      	b.n	8002c44 <_printf_common+0xa8>
 8002c32:	2301      	movs	r3, #1
 8002c34:	4652      	mov	r2, sl
 8002c36:	4641      	mov	r1, r8
 8002c38:	4638      	mov	r0, r7
 8002c3a:	47c8      	blx	r9
 8002c3c:	3001      	adds	r0, #1
 8002c3e:	d103      	bne.n	8002c48 <_printf_common+0xac>
 8002c40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c48:	3501      	adds	r5, #1
 8002c4a:	e7c6      	b.n	8002bda <_printf_common+0x3e>
 8002c4c:	18e1      	adds	r1, r4, r3
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	2030      	movs	r0, #48	@ 0x30
 8002c52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c56:	4422      	add	r2, r4
 8002c58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002c5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002c60:	3302      	adds	r3, #2
 8002c62:	e7c7      	b.n	8002bf4 <_printf_common+0x58>
 8002c64:	2301      	movs	r3, #1
 8002c66:	4622      	mov	r2, r4
 8002c68:	4641      	mov	r1, r8
 8002c6a:	4638      	mov	r0, r7
 8002c6c:	47c8      	blx	r9
 8002c6e:	3001      	adds	r0, #1
 8002c70:	d0e6      	beq.n	8002c40 <_printf_common+0xa4>
 8002c72:	3601      	adds	r6, #1
 8002c74:	e7d9      	b.n	8002c2a <_printf_common+0x8e>
	...

08002c78 <_printf_i>:
 8002c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c7c:	7e0f      	ldrb	r7, [r1, #24]
 8002c7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002c80:	2f78      	cmp	r7, #120	@ 0x78
 8002c82:	4691      	mov	r9, r2
 8002c84:	4680      	mov	r8, r0
 8002c86:	460c      	mov	r4, r1
 8002c88:	469a      	mov	sl, r3
 8002c8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002c8e:	d807      	bhi.n	8002ca0 <_printf_i+0x28>
 8002c90:	2f62      	cmp	r7, #98	@ 0x62
 8002c92:	d80a      	bhi.n	8002caa <_printf_i+0x32>
 8002c94:	2f00      	cmp	r7, #0
 8002c96:	f000 80d2 	beq.w	8002e3e <_printf_i+0x1c6>
 8002c9a:	2f58      	cmp	r7, #88	@ 0x58
 8002c9c:	f000 80b9 	beq.w	8002e12 <_printf_i+0x19a>
 8002ca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ca4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002ca8:	e03a      	b.n	8002d20 <_printf_i+0xa8>
 8002caa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002cae:	2b15      	cmp	r3, #21
 8002cb0:	d8f6      	bhi.n	8002ca0 <_printf_i+0x28>
 8002cb2:	a101      	add	r1, pc, #4	@ (adr r1, 8002cb8 <_printf_i+0x40>)
 8002cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002cb8:	08002d11 	.word	0x08002d11
 8002cbc:	08002d25 	.word	0x08002d25
 8002cc0:	08002ca1 	.word	0x08002ca1
 8002cc4:	08002ca1 	.word	0x08002ca1
 8002cc8:	08002ca1 	.word	0x08002ca1
 8002ccc:	08002ca1 	.word	0x08002ca1
 8002cd0:	08002d25 	.word	0x08002d25
 8002cd4:	08002ca1 	.word	0x08002ca1
 8002cd8:	08002ca1 	.word	0x08002ca1
 8002cdc:	08002ca1 	.word	0x08002ca1
 8002ce0:	08002ca1 	.word	0x08002ca1
 8002ce4:	08002e25 	.word	0x08002e25
 8002ce8:	08002d4f 	.word	0x08002d4f
 8002cec:	08002ddf 	.word	0x08002ddf
 8002cf0:	08002ca1 	.word	0x08002ca1
 8002cf4:	08002ca1 	.word	0x08002ca1
 8002cf8:	08002e47 	.word	0x08002e47
 8002cfc:	08002ca1 	.word	0x08002ca1
 8002d00:	08002d4f 	.word	0x08002d4f
 8002d04:	08002ca1 	.word	0x08002ca1
 8002d08:	08002ca1 	.word	0x08002ca1
 8002d0c:	08002de7 	.word	0x08002de7
 8002d10:	6833      	ldr	r3, [r6, #0]
 8002d12:	1d1a      	adds	r2, r3, #4
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6032      	str	r2, [r6, #0]
 8002d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d20:	2301      	movs	r3, #1
 8002d22:	e09d      	b.n	8002e60 <_printf_i+0x1e8>
 8002d24:	6833      	ldr	r3, [r6, #0]
 8002d26:	6820      	ldr	r0, [r4, #0]
 8002d28:	1d19      	adds	r1, r3, #4
 8002d2a:	6031      	str	r1, [r6, #0]
 8002d2c:	0606      	lsls	r6, r0, #24
 8002d2e:	d501      	bpl.n	8002d34 <_printf_i+0xbc>
 8002d30:	681d      	ldr	r5, [r3, #0]
 8002d32:	e003      	b.n	8002d3c <_printf_i+0xc4>
 8002d34:	0645      	lsls	r5, r0, #25
 8002d36:	d5fb      	bpl.n	8002d30 <_printf_i+0xb8>
 8002d38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002d3c:	2d00      	cmp	r5, #0
 8002d3e:	da03      	bge.n	8002d48 <_printf_i+0xd0>
 8002d40:	232d      	movs	r3, #45	@ 0x2d
 8002d42:	426d      	negs	r5, r5
 8002d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d48:	4859      	ldr	r0, [pc, #356]	@ (8002eb0 <_printf_i+0x238>)
 8002d4a:	230a      	movs	r3, #10
 8002d4c:	e011      	b.n	8002d72 <_printf_i+0xfa>
 8002d4e:	6821      	ldr	r1, [r4, #0]
 8002d50:	6833      	ldr	r3, [r6, #0]
 8002d52:	0608      	lsls	r0, r1, #24
 8002d54:	f853 5b04 	ldr.w	r5, [r3], #4
 8002d58:	d402      	bmi.n	8002d60 <_printf_i+0xe8>
 8002d5a:	0649      	lsls	r1, r1, #25
 8002d5c:	bf48      	it	mi
 8002d5e:	b2ad      	uxthmi	r5, r5
 8002d60:	2f6f      	cmp	r7, #111	@ 0x6f
 8002d62:	4853      	ldr	r0, [pc, #332]	@ (8002eb0 <_printf_i+0x238>)
 8002d64:	6033      	str	r3, [r6, #0]
 8002d66:	bf14      	ite	ne
 8002d68:	230a      	movne	r3, #10
 8002d6a:	2308      	moveq	r3, #8
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002d72:	6866      	ldr	r6, [r4, #4]
 8002d74:	60a6      	str	r6, [r4, #8]
 8002d76:	2e00      	cmp	r6, #0
 8002d78:	bfa2      	ittt	ge
 8002d7a:	6821      	ldrge	r1, [r4, #0]
 8002d7c:	f021 0104 	bicge.w	r1, r1, #4
 8002d80:	6021      	strge	r1, [r4, #0]
 8002d82:	b90d      	cbnz	r5, 8002d88 <_printf_i+0x110>
 8002d84:	2e00      	cmp	r6, #0
 8002d86:	d04b      	beq.n	8002e20 <_printf_i+0x1a8>
 8002d88:	4616      	mov	r6, r2
 8002d8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d8e:	fb03 5711 	mls	r7, r3, r1, r5
 8002d92:	5dc7      	ldrb	r7, [r0, r7]
 8002d94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d98:	462f      	mov	r7, r5
 8002d9a:	42bb      	cmp	r3, r7
 8002d9c:	460d      	mov	r5, r1
 8002d9e:	d9f4      	bls.n	8002d8a <_printf_i+0x112>
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d10b      	bne.n	8002dbc <_printf_i+0x144>
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	07df      	lsls	r7, r3, #31
 8002da8:	d508      	bpl.n	8002dbc <_printf_i+0x144>
 8002daa:	6923      	ldr	r3, [r4, #16]
 8002dac:	6861      	ldr	r1, [r4, #4]
 8002dae:	4299      	cmp	r1, r3
 8002db0:	bfde      	ittt	le
 8002db2:	2330      	movle	r3, #48	@ 0x30
 8002db4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002db8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002dbc:	1b92      	subs	r2, r2, r6
 8002dbe:	6122      	str	r2, [r4, #16]
 8002dc0:	f8cd a000 	str.w	sl, [sp]
 8002dc4:	464b      	mov	r3, r9
 8002dc6:	aa03      	add	r2, sp, #12
 8002dc8:	4621      	mov	r1, r4
 8002dca:	4640      	mov	r0, r8
 8002dcc:	f7ff fee6 	bl	8002b9c <_printf_common>
 8002dd0:	3001      	adds	r0, #1
 8002dd2:	d14a      	bne.n	8002e6a <_printf_i+0x1f2>
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002dd8:	b004      	add	sp, #16
 8002dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	f043 0320 	orr.w	r3, r3, #32
 8002de4:	6023      	str	r3, [r4, #0]
 8002de6:	4833      	ldr	r0, [pc, #204]	@ (8002eb4 <_printf_i+0x23c>)
 8002de8:	2778      	movs	r7, #120	@ 0x78
 8002dea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	6831      	ldr	r1, [r6, #0]
 8002df2:	061f      	lsls	r7, r3, #24
 8002df4:	f851 5b04 	ldr.w	r5, [r1], #4
 8002df8:	d402      	bmi.n	8002e00 <_printf_i+0x188>
 8002dfa:	065f      	lsls	r7, r3, #25
 8002dfc:	bf48      	it	mi
 8002dfe:	b2ad      	uxthmi	r5, r5
 8002e00:	6031      	str	r1, [r6, #0]
 8002e02:	07d9      	lsls	r1, r3, #31
 8002e04:	bf44      	itt	mi
 8002e06:	f043 0320 	orrmi.w	r3, r3, #32
 8002e0a:	6023      	strmi	r3, [r4, #0]
 8002e0c:	b11d      	cbz	r5, 8002e16 <_printf_i+0x19e>
 8002e0e:	2310      	movs	r3, #16
 8002e10:	e7ac      	b.n	8002d6c <_printf_i+0xf4>
 8002e12:	4827      	ldr	r0, [pc, #156]	@ (8002eb0 <_printf_i+0x238>)
 8002e14:	e7e9      	b.n	8002dea <_printf_i+0x172>
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	f023 0320 	bic.w	r3, r3, #32
 8002e1c:	6023      	str	r3, [r4, #0]
 8002e1e:	e7f6      	b.n	8002e0e <_printf_i+0x196>
 8002e20:	4616      	mov	r6, r2
 8002e22:	e7bd      	b.n	8002da0 <_printf_i+0x128>
 8002e24:	6833      	ldr	r3, [r6, #0]
 8002e26:	6825      	ldr	r5, [r4, #0]
 8002e28:	6961      	ldr	r1, [r4, #20]
 8002e2a:	1d18      	adds	r0, r3, #4
 8002e2c:	6030      	str	r0, [r6, #0]
 8002e2e:	062e      	lsls	r6, r5, #24
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	d501      	bpl.n	8002e38 <_printf_i+0x1c0>
 8002e34:	6019      	str	r1, [r3, #0]
 8002e36:	e002      	b.n	8002e3e <_printf_i+0x1c6>
 8002e38:	0668      	lsls	r0, r5, #25
 8002e3a:	d5fb      	bpl.n	8002e34 <_printf_i+0x1bc>
 8002e3c:	8019      	strh	r1, [r3, #0]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	6123      	str	r3, [r4, #16]
 8002e42:	4616      	mov	r6, r2
 8002e44:	e7bc      	b.n	8002dc0 <_printf_i+0x148>
 8002e46:	6833      	ldr	r3, [r6, #0]
 8002e48:	1d1a      	adds	r2, r3, #4
 8002e4a:	6032      	str	r2, [r6, #0]
 8002e4c:	681e      	ldr	r6, [r3, #0]
 8002e4e:	6862      	ldr	r2, [r4, #4]
 8002e50:	2100      	movs	r1, #0
 8002e52:	4630      	mov	r0, r6
 8002e54:	f7fd f9bc 	bl	80001d0 <memchr>
 8002e58:	b108      	cbz	r0, 8002e5e <_printf_i+0x1e6>
 8002e5a:	1b80      	subs	r0, r0, r6
 8002e5c:	6060      	str	r0, [r4, #4]
 8002e5e:	6863      	ldr	r3, [r4, #4]
 8002e60:	6123      	str	r3, [r4, #16]
 8002e62:	2300      	movs	r3, #0
 8002e64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e68:	e7aa      	b.n	8002dc0 <_printf_i+0x148>
 8002e6a:	6923      	ldr	r3, [r4, #16]
 8002e6c:	4632      	mov	r2, r6
 8002e6e:	4649      	mov	r1, r9
 8002e70:	4640      	mov	r0, r8
 8002e72:	47d0      	blx	sl
 8002e74:	3001      	adds	r0, #1
 8002e76:	d0ad      	beq.n	8002dd4 <_printf_i+0x15c>
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	079b      	lsls	r3, r3, #30
 8002e7c:	d413      	bmi.n	8002ea6 <_printf_i+0x22e>
 8002e7e:	68e0      	ldr	r0, [r4, #12]
 8002e80:	9b03      	ldr	r3, [sp, #12]
 8002e82:	4298      	cmp	r0, r3
 8002e84:	bfb8      	it	lt
 8002e86:	4618      	movlt	r0, r3
 8002e88:	e7a6      	b.n	8002dd8 <_printf_i+0x160>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	4632      	mov	r2, r6
 8002e8e:	4649      	mov	r1, r9
 8002e90:	4640      	mov	r0, r8
 8002e92:	47d0      	blx	sl
 8002e94:	3001      	adds	r0, #1
 8002e96:	d09d      	beq.n	8002dd4 <_printf_i+0x15c>
 8002e98:	3501      	adds	r5, #1
 8002e9a:	68e3      	ldr	r3, [r4, #12]
 8002e9c:	9903      	ldr	r1, [sp, #12]
 8002e9e:	1a5b      	subs	r3, r3, r1
 8002ea0:	42ab      	cmp	r3, r5
 8002ea2:	dcf2      	bgt.n	8002e8a <_printf_i+0x212>
 8002ea4:	e7eb      	b.n	8002e7e <_printf_i+0x206>
 8002ea6:	2500      	movs	r5, #0
 8002ea8:	f104 0619 	add.w	r6, r4, #25
 8002eac:	e7f5      	b.n	8002e9a <_printf_i+0x222>
 8002eae:	bf00      	nop
 8002eb0:	080033c5 	.word	0x080033c5
 8002eb4:	080033d6 	.word	0x080033d6

08002eb8 <__malloc_lock>:
 8002eb8:	4801      	ldr	r0, [pc, #4]	@ (8002ec0 <__malloc_lock+0x8>)
 8002eba:	f7ff bc73 	b.w	80027a4 <__retarget_lock_acquire_recursive>
 8002ebe:	bf00      	nop
 8002ec0:	20001188 	.word	0x20001188

08002ec4 <__malloc_unlock>:
 8002ec4:	4801      	ldr	r0, [pc, #4]	@ (8002ecc <__malloc_unlock+0x8>)
 8002ec6:	f7ff bc6e 	b.w	80027a6 <__retarget_lock_release_recursive>
 8002eca:	bf00      	nop
 8002ecc:	20001188 	.word	0x20001188

08002ed0 <_realloc_r>:
 8002ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed4:	4680      	mov	r8, r0
 8002ed6:	4615      	mov	r5, r2
 8002ed8:	460c      	mov	r4, r1
 8002eda:	b921      	cbnz	r1, 8002ee6 <_realloc_r+0x16>
 8002edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	f7ff bddb 	b.w	8002a9c <_malloc_r>
 8002ee6:	b92a      	cbnz	r2, 8002ef4 <_realloc_r+0x24>
 8002ee8:	f000 f858 	bl	8002f9c <_free_r>
 8002eec:	2400      	movs	r4, #0
 8002eee:	4620      	mov	r0, r4
 8002ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ef4:	f000 f89c 	bl	8003030 <_malloc_usable_size_r>
 8002ef8:	4285      	cmp	r5, r0
 8002efa:	4606      	mov	r6, r0
 8002efc:	d802      	bhi.n	8002f04 <_realloc_r+0x34>
 8002efe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002f02:	d8f4      	bhi.n	8002eee <_realloc_r+0x1e>
 8002f04:	4629      	mov	r1, r5
 8002f06:	4640      	mov	r0, r8
 8002f08:	f7ff fdc8 	bl	8002a9c <_malloc_r>
 8002f0c:	4607      	mov	r7, r0
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	d0ec      	beq.n	8002eec <_realloc_r+0x1c>
 8002f12:	42b5      	cmp	r5, r6
 8002f14:	462a      	mov	r2, r5
 8002f16:	4621      	mov	r1, r4
 8002f18:	bf28      	it	cs
 8002f1a:	4632      	movcs	r2, r6
 8002f1c:	f000 f830 	bl	8002f80 <memcpy>
 8002f20:	4621      	mov	r1, r4
 8002f22:	4640      	mov	r0, r8
 8002f24:	f000 f83a 	bl	8002f9c <_free_r>
 8002f28:	463c      	mov	r4, r7
 8002f2a:	e7e0      	b.n	8002eee <_realloc_r+0x1e>

08002f2c <memmove>:
 8002f2c:	4288      	cmp	r0, r1
 8002f2e:	b510      	push	{r4, lr}
 8002f30:	eb01 0402 	add.w	r4, r1, r2
 8002f34:	d902      	bls.n	8002f3c <memmove+0x10>
 8002f36:	4284      	cmp	r4, r0
 8002f38:	4623      	mov	r3, r4
 8002f3a:	d807      	bhi.n	8002f4c <memmove+0x20>
 8002f3c:	1e43      	subs	r3, r0, #1
 8002f3e:	42a1      	cmp	r1, r4
 8002f40:	d008      	beq.n	8002f54 <memmove+0x28>
 8002f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f4a:	e7f8      	b.n	8002f3e <memmove+0x12>
 8002f4c:	4402      	add	r2, r0
 8002f4e:	4601      	mov	r1, r0
 8002f50:	428a      	cmp	r2, r1
 8002f52:	d100      	bne.n	8002f56 <memmove+0x2a>
 8002f54:	bd10      	pop	{r4, pc}
 8002f56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f5e:	e7f7      	b.n	8002f50 <memmove+0x24>

08002f60 <_sbrk_r>:
 8002f60:	b538      	push	{r3, r4, r5, lr}
 8002f62:	4d06      	ldr	r5, [pc, #24]	@ (8002f7c <_sbrk_r+0x1c>)
 8002f64:	2300      	movs	r3, #0
 8002f66:	4604      	mov	r4, r0
 8002f68:	4608      	mov	r0, r1
 8002f6a:	602b      	str	r3, [r5, #0]
 8002f6c:	f7fe fbd0 	bl	8001710 <_sbrk>
 8002f70:	1c43      	adds	r3, r0, #1
 8002f72:	d102      	bne.n	8002f7a <_sbrk_r+0x1a>
 8002f74:	682b      	ldr	r3, [r5, #0]
 8002f76:	b103      	cbz	r3, 8002f7a <_sbrk_r+0x1a>
 8002f78:	6023      	str	r3, [r4, #0]
 8002f7a:	bd38      	pop	{r3, r4, r5, pc}
 8002f7c:	20001194 	.word	0x20001194

08002f80 <memcpy>:
 8002f80:	440a      	add	r2, r1
 8002f82:	4291      	cmp	r1, r2
 8002f84:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002f88:	d100      	bne.n	8002f8c <memcpy+0xc>
 8002f8a:	4770      	bx	lr
 8002f8c:	b510      	push	{r4, lr}
 8002f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f96:	4291      	cmp	r1, r2
 8002f98:	d1f9      	bne.n	8002f8e <memcpy+0xe>
 8002f9a:	bd10      	pop	{r4, pc}

08002f9c <_free_r>:
 8002f9c:	b538      	push	{r3, r4, r5, lr}
 8002f9e:	4605      	mov	r5, r0
 8002fa0:	2900      	cmp	r1, #0
 8002fa2:	d041      	beq.n	8003028 <_free_r+0x8c>
 8002fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fa8:	1f0c      	subs	r4, r1, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bfb8      	it	lt
 8002fae:	18e4      	addlt	r4, r4, r3
 8002fb0:	f7ff ff82 	bl	8002eb8 <__malloc_lock>
 8002fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800302c <_free_r+0x90>)
 8002fb6:	6813      	ldr	r3, [r2, #0]
 8002fb8:	b933      	cbnz	r3, 8002fc8 <_free_r+0x2c>
 8002fba:	6063      	str	r3, [r4, #4]
 8002fbc:	6014      	str	r4, [r2, #0]
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fc4:	f7ff bf7e 	b.w	8002ec4 <__malloc_unlock>
 8002fc8:	42a3      	cmp	r3, r4
 8002fca:	d908      	bls.n	8002fde <_free_r+0x42>
 8002fcc:	6820      	ldr	r0, [r4, #0]
 8002fce:	1821      	adds	r1, r4, r0
 8002fd0:	428b      	cmp	r3, r1
 8002fd2:	bf01      	itttt	eq
 8002fd4:	6819      	ldreq	r1, [r3, #0]
 8002fd6:	685b      	ldreq	r3, [r3, #4]
 8002fd8:	1809      	addeq	r1, r1, r0
 8002fda:	6021      	streq	r1, [r4, #0]
 8002fdc:	e7ed      	b.n	8002fba <_free_r+0x1e>
 8002fde:	461a      	mov	r2, r3
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	b10b      	cbz	r3, 8002fe8 <_free_r+0x4c>
 8002fe4:	42a3      	cmp	r3, r4
 8002fe6:	d9fa      	bls.n	8002fde <_free_r+0x42>
 8002fe8:	6811      	ldr	r1, [r2, #0]
 8002fea:	1850      	adds	r0, r2, r1
 8002fec:	42a0      	cmp	r0, r4
 8002fee:	d10b      	bne.n	8003008 <_free_r+0x6c>
 8002ff0:	6820      	ldr	r0, [r4, #0]
 8002ff2:	4401      	add	r1, r0
 8002ff4:	1850      	adds	r0, r2, r1
 8002ff6:	4283      	cmp	r3, r0
 8002ff8:	6011      	str	r1, [r2, #0]
 8002ffa:	d1e0      	bne.n	8002fbe <_free_r+0x22>
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	6053      	str	r3, [r2, #4]
 8003002:	4408      	add	r0, r1
 8003004:	6010      	str	r0, [r2, #0]
 8003006:	e7da      	b.n	8002fbe <_free_r+0x22>
 8003008:	d902      	bls.n	8003010 <_free_r+0x74>
 800300a:	230c      	movs	r3, #12
 800300c:	602b      	str	r3, [r5, #0]
 800300e:	e7d6      	b.n	8002fbe <_free_r+0x22>
 8003010:	6820      	ldr	r0, [r4, #0]
 8003012:	1821      	adds	r1, r4, r0
 8003014:	428b      	cmp	r3, r1
 8003016:	bf04      	itt	eq
 8003018:	6819      	ldreq	r1, [r3, #0]
 800301a:	685b      	ldreq	r3, [r3, #4]
 800301c:	6063      	str	r3, [r4, #4]
 800301e:	bf04      	itt	eq
 8003020:	1809      	addeq	r1, r1, r0
 8003022:	6021      	streq	r1, [r4, #0]
 8003024:	6054      	str	r4, [r2, #4]
 8003026:	e7ca      	b.n	8002fbe <_free_r+0x22>
 8003028:	bd38      	pop	{r3, r4, r5, pc}
 800302a:	bf00      	nop
 800302c:	20001190 	.word	0x20001190

08003030 <_malloc_usable_size_r>:
 8003030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003034:	1f18      	subs	r0, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	bfbc      	itt	lt
 800303a:	580b      	ldrlt	r3, [r1, r0]
 800303c:	18c0      	addlt	r0, r0, r3
 800303e:	4770      	bx	lr

08003040 <sqrt>:
 8003040:	b538      	push	{r3, r4, r5, lr}
 8003042:	ed2d 8b02 	vpush	{d8}
 8003046:	ec55 4b10 	vmov	r4, r5, d0
 800304a:	f000 f825 	bl	8003098 <__ieee754_sqrt>
 800304e:	4622      	mov	r2, r4
 8003050:	462b      	mov	r3, r5
 8003052:	4620      	mov	r0, r4
 8003054:	4629      	mov	r1, r5
 8003056:	eeb0 8a40 	vmov.f32	s16, s0
 800305a:	eef0 8a60 	vmov.f32	s17, s1
 800305e:	f7fd fd5d 	bl	8000b1c <__aeabi_dcmpun>
 8003062:	b990      	cbnz	r0, 800308a <sqrt+0x4a>
 8003064:	2200      	movs	r2, #0
 8003066:	2300      	movs	r3, #0
 8003068:	4620      	mov	r0, r4
 800306a:	4629      	mov	r1, r5
 800306c:	f7fd fd2e 	bl	8000acc <__aeabi_dcmplt>
 8003070:	b158      	cbz	r0, 800308a <sqrt+0x4a>
 8003072:	f7ff fb6d 	bl	8002750 <__errno>
 8003076:	2321      	movs	r3, #33	@ 0x21
 8003078:	6003      	str	r3, [r0, #0]
 800307a:	2200      	movs	r2, #0
 800307c:	2300      	movs	r3, #0
 800307e:	4610      	mov	r0, r2
 8003080:	4619      	mov	r1, r3
 8003082:	f7fd fbdb 	bl	800083c <__aeabi_ddiv>
 8003086:	ec41 0b18 	vmov	d8, r0, r1
 800308a:	eeb0 0a48 	vmov.f32	s0, s16
 800308e:	eef0 0a68 	vmov.f32	s1, s17
 8003092:	ecbd 8b02 	vpop	{d8}
 8003096:	bd38      	pop	{r3, r4, r5, pc}

08003098 <__ieee754_sqrt>:
 8003098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800309c:	4a68      	ldr	r2, [pc, #416]	@ (8003240 <__ieee754_sqrt+0x1a8>)
 800309e:	ec55 4b10 	vmov	r4, r5, d0
 80030a2:	43aa      	bics	r2, r5
 80030a4:	462b      	mov	r3, r5
 80030a6:	4621      	mov	r1, r4
 80030a8:	d110      	bne.n	80030cc <__ieee754_sqrt+0x34>
 80030aa:	4622      	mov	r2, r4
 80030ac:	4620      	mov	r0, r4
 80030ae:	4629      	mov	r1, r5
 80030b0:	f7fd fa9a 	bl	80005e8 <__aeabi_dmul>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4620      	mov	r0, r4
 80030ba:	4629      	mov	r1, r5
 80030bc:	f7fd f8de 	bl	800027c <__adddf3>
 80030c0:	4604      	mov	r4, r0
 80030c2:	460d      	mov	r5, r1
 80030c4:	ec45 4b10 	vmov	d0, r4, r5
 80030c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030cc:	2d00      	cmp	r5, #0
 80030ce:	dc0e      	bgt.n	80030ee <__ieee754_sqrt+0x56>
 80030d0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80030d4:	4322      	orrs	r2, r4
 80030d6:	d0f5      	beq.n	80030c4 <__ieee754_sqrt+0x2c>
 80030d8:	b19d      	cbz	r5, 8003102 <__ieee754_sqrt+0x6a>
 80030da:	4622      	mov	r2, r4
 80030dc:	4620      	mov	r0, r4
 80030de:	4629      	mov	r1, r5
 80030e0:	f7fd f8ca 	bl	8000278 <__aeabi_dsub>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	f7fd fba8 	bl	800083c <__aeabi_ddiv>
 80030ec:	e7e8      	b.n	80030c0 <__ieee754_sqrt+0x28>
 80030ee:	152a      	asrs	r2, r5, #20
 80030f0:	d115      	bne.n	800311e <__ieee754_sqrt+0x86>
 80030f2:	2000      	movs	r0, #0
 80030f4:	e009      	b.n	800310a <__ieee754_sqrt+0x72>
 80030f6:	0acb      	lsrs	r3, r1, #11
 80030f8:	3a15      	subs	r2, #21
 80030fa:	0549      	lsls	r1, r1, #21
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0fa      	beq.n	80030f6 <__ieee754_sqrt+0x5e>
 8003100:	e7f7      	b.n	80030f2 <__ieee754_sqrt+0x5a>
 8003102:	462a      	mov	r2, r5
 8003104:	e7fa      	b.n	80030fc <__ieee754_sqrt+0x64>
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	3001      	adds	r0, #1
 800310a:	02dc      	lsls	r4, r3, #11
 800310c:	d5fb      	bpl.n	8003106 <__ieee754_sqrt+0x6e>
 800310e:	1e44      	subs	r4, r0, #1
 8003110:	1b12      	subs	r2, r2, r4
 8003112:	f1c0 0420 	rsb	r4, r0, #32
 8003116:	fa21 f404 	lsr.w	r4, r1, r4
 800311a:	4323      	orrs	r3, r4
 800311c:	4081      	lsls	r1, r0
 800311e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003122:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8003126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800312a:	07d2      	lsls	r2, r2, #31
 800312c:	bf5c      	itt	pl
 800312e:	005b      	lslpl	r3, r3, #1
 8003130:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8003134:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003138:	bf58      	it	pl
 800313a:	0049      	lslpl	r1, r1, #1
 800313c:	2600      	movs	r6, #0
 800313e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8003142:	106d      	asrs	r5, r5, #1
 8003144:	0049      	lsls	r1, r1, #1
 8003146:	2016      	movs	r0, #22
 8003148:	4632      	mov	r2, r6
 800314a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800314e:	1917      	adds	r7, r2, r4
 8003150:	429f      	cmp	r7, r3
 8003152:	bfde      	ittt	le
 8003154:	193a      	addle	r2, r7, r4
 8003156:	1bdb      	suble	r3, r3, r7
 8003158:	1936      	addle	r6, r6, r4
 800315a:	0fcf      	lsrs	r7, r1, #31
 800315c:	3801      	subs	r0, #1
 800315e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8003162:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003166:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800316a:	d1f0      	bne.n	800314e <__ieee754_sqrt+0xb6>
 800316c:	4604      	mov	r4, r0
 800316e:	2720      	movs	r7, #32
 8003170:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8003174:	429a      	cmp	r2, r3
 8003176:	eb00 0e0c 	add.w	lr, r0, ip
 800317a:	db02      	blt.n	8003182 <__ieee754_sqrt+0xea>
 800317c:	d113      	bne.n	80031a6 <__ieee754_sqrt+0x10e>
 800317e:	458e      	cmp	lr, r1
 8003180:	d811      	bhi.n	80031a6 <__ieee754_sqrt+0x10e>
 8003182:	f1be 0f00 	cmp.w	lr, #0
 8003186:	eb0e 000c 	add.w	r0, lr, ip
 800318a:	da42      	bge.n	8003212 <__ieee754_sqrt+0x17a>
 800318c:	2800      	cmp	r0, #0
 800318e:	db40      	blt.n	8003212 <__ieee754_sqrt+0x17a>
 8003190:	f102 0801 	add.w	r8, r2, #1
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	458e      	cmp	lr, r1
 8003198:	bf88      	it	hi
 800319a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800319e:	eba1 010e 	sub.w	r1, r1, lr
 80031a2:	4464      	add	r4, ip
 80031a4:	4642      	mov	r2, r8
 80031a6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80031aa:	3f01      	subs	r7, #1
 80031ac:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80031b0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80031b4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80031b8:	d1dc      	bne.n	8003174 <__ieee754_sqrt+0xdc>
 80031ba:	4319      	orrs	r1, r3
 80031bc:	d01b      	beq.n	80031f6 <__ieee754_sqrt+0x15e>
 80031be:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8003244 <__ieee754_sqrt+0x1ac>
 80031c2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8003248 <__ieee754_sqrt+0x1b0>
 80031c6:	e9da 0100 	ldrd	r0, r1, [sl]
 80031ca:	e9db 2300 	ldrd	r2, r3, [fp]
 80031ce:	f7fd f853 	bl	8000278 <__aeabi_dsub>
 80031d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4640      	mov	r0, r8
 80031dc:	4649      	mov	r1, r9
 80031de:	f7fd fc7f 	bl	8000ae0 <__aeabi_dcmple>
 80031e2:	b140      	cbz	r0, 80031f6 <__ieee754_sqrt+0x15e>
 80031e4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80031e8:	e9da 0100 	ldrd	r0, r1, [sl]
 80031ec:	e9db 2300 	ldrd	r2, r3, [fp]
 80031f0:	d111      	bne.n	8003216 <__ieee754_sqrt+0x17e>
 80031f2:	3601      	adds	r6, #1
 80031f4:	463c      	mov	r4, r7
 80031f6:	1072      	asrs	r2, r6, #1
 80031f8:	0863      	lsrs	r3, r4, #1
 80031fa:	07f1      	lsls	r1, r6, #31
 80031fc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8003200:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8003204:	bf48      	it	mi
 8003206:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800320a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800320e:	4618      	mov	r0, r3
 8003210:	e756      	b.n	80030c0 <__ieee754_sqrt+0x28>
 8003212:	4690      	mov	r8, r2
 8003214:	e7be      	b.n	8003194 <__ieee754_sqrt+0xfc>
 8003216:	f7fd f831 	bl	800027c <__adddf3>
 800321a:	e9da 8900 	ldrd	r8, r9, [sl]
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4640      	mov	r0, r8
 8003224:	4649      	mov	r1, r9
 8003226:	f7fd fc51 	bl	8000acc <__aeabi_dcmplt>
 800322a:	b120      	cbz	r0, 8003236 <__ieee754_sqrt+0x19e>
 800322c:	1ca0      	adds	r0, r4, #2
 800322e:	bf08      	it	eq
 8003230:	3601      	addeq	r6, #1
 8003232:	3402      	adds	r4, #2
 8003234:	e7df      	b.n	80031f6 <__ieee754_sqrt+0x15e>
 8003236:	1c63      	adds	r3, r4, #1
 8003238:	f023 0401 	bic.w	r4, r3, #1
 800323c:	e7db      	b.n	80031f6 <__ieee754_sqrt+0x15e>
 800323e:	bf00      	nop
 8003240:	7ff00000 	.word	0x7ff00000
 8003244:	20000068 	.word	0x20000068
 8003248:	20000060 	.word	0x20000060

0800324c <_init>:
 800324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324e:	bf00      	nop
 8003250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003252:	bc08      	pop	{r3}
 8003254:	469e      	mov	lr, r3
 8003256:	4770      	bx	lr

08003258 <_fini>:
 8003258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325a:	bf00      	nop
 800325c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325e:	bc08      	pop	{r3}
 8003260:	469e      	mov	lr, r3
 8003262:	4770      	bx	lr
